{
  "swagger": "2.0",
  "info": {
    "title": "Lightwave Multi Tenant CA APIs",
    "description": "List of Lightwave Multi Tenant CA APIs",
    "version": "v1"
  },
  "host": "IPADDRESS_MARKER",
  "schemes": [
    "https"
  ],
  "basePath": "/v1",
  "securityDefinitions": {
    "AuthToken": {
      "description": "Token based authentication like Bearer, HOTK",
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "AuthToken": []
    }
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "rootca"
    },
    {
      "name": "intermediateca"
    },
    {
      "name": "chainoftrust"
    },
    {
      "name": "crl"
    },
    {
      "name": "certificates"
    }
  ],
  "paths": {
    "/mutentca/version": {
      "get": {
        "tags": [
          "rootca"
        ],
        "summary": "Certificate authority version",
        "description": "Returns certificate authority version\n",
        "operationId": "getCAVersion",
        "responses": {
          "200": {
            "description": "Certificate authority version\n",
            "schema": {
              "$ref": "#/definitions/Version"
            }
          },
          "default": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/mutentca/root": {
      "get": {
        "tags": [
          "rootca"
        ],
        "summary": "Get root ca certificate details",
        "description": "Returns root ca certificates with (optional) crls.\n",
        "operationId": "getRootCA",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "type": "string",
            "required": false
          },
          {
            "name": "detail",
            "in": "header",
            "type": "boolean",
            "required": false,
            "description": "This can be set to return ca certificates with corresponding crls"
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate authority details\n",
            "schema": {
              "$ref": "#/definitions/CADetails"
            }
          },
          "default": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/mutentca/intermediate": {
      "post": {
        "tags": [
          "intermediateca"
        ],
        "summary": "Create intermediate certificate authority",
        "description": "Creates intermediate certificate authority\n",
        "operationId": "createIntermediateCA",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "type": "string",
            "required": false
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IntermediateCACreateSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate authority details\n",
            "schema": {
              "$ref": "#/definitions/CADetails"
            }
          },
          "400": {
            "description": "Bad Request\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Invalid Credentials\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Parent CA Not Found\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "CA Already Exists\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "default": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/mutentca/intermediate/{ca-id}": {
      "get": {
        "tags": [
          "intermediateca"
        ],
        "summary": "Get intermediate ca certificate",
        "description": "Returns intermediate ca certificate with (optional) crls\n",
        "operationId": "getIntermediateCA",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "type": "string",
            "required": false
          },
          {
            "name": "ca-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "identifies intermediate ca context in which operation is executed"
          },
          {
            "name": "detail",
            "in": "header",
            "type": "boolean",
            "required": false,
            "description": "This can be set to return ca certificates with corresponding crls"
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate authority details\n",
            "schema": {
              "$ref": "#/definitions/CADetails"
            }
          },
          "400": {
            "description": "Bad Request\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Invalid Credentials\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "CA Not Found\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "default": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "intermediateca"
        ],
        "summary": "Revoke intermediate certificate authority ",
        "description": "Revokes intermediate certificate authority\n",
        "operationId": "revokeIntermediateCA",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "type": "string",
            "required": false
          },
          {
            "name": "ca-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "identifies intermediate ca context in which operation is executed"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation\n"
          },
          "400": {
            "description": "Bad Request\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Invalid Credentials\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "CA Not Found\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "CA Already Revoked\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "default": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/mutentca/chainoftrust": {
      "get": {
        "tags": [
          "chainoftrust"
        ],
        "summary": "Chain of trust of the root CA",
        "description": "Retrieves the chain of trust of the root CA\n",
        "operationId": "getRootCAChainOfTrust",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Chain of trust of the root certificate authority\n",
            "schema": {
              "$ref": "#/definitions/ChainOfTrust"
            }
          },
          "default": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/mutentca/intermediate/{ca-id}/chainoftrust": {
      "get": {
        "tags": [
          "chainoftrust"
        ],
        "summary": "Chain of trust of an intermediate CA",
        "description": "Retrieves the chain of trust of an intermediate CA\n",
        "operationId": "getIntermediateCAChainOfTrust",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "type": "string",
            "required": false
          },
          {
            "name": "ca-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "identifies intermediate ca context in which operation is executed"
          }
        ],
        "responses": {
          "200": {
            "description": "Chain of trust of the intermediate certificate authority\n",
            "schema": {
              "$ref": "#/definitions/ChainOfTrust"
            }
          },
          "400": {
            "description": "Bad Request\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Invalid Credentials\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "CA Not Found\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "default": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/mutentca/crl": {
      "get": {
        "tags": [
          "crl"
        ],
        "summary": "CRL issued by the root certificate authority",
        "description": "Retrieves CRL issued by the root certificate authority\n",
        "operationId": "getRootCACRL",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "CRL issued by certificate authority\n",
            "schema": {
              "$ref": "#/definitions/CRL"
            }
          },
          "default": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/mutentca/intermediate/{ca-id}/crl": {
      "get": {
        "tags": [
          "crl"
        ],
        "summary": "CRL issued by intermediate certificate authority",
        "description": "Retrieves CRL issued by intermediate certificate authority\n",
        "operationId": "getIntermediateCACRL",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "type": "string",
            "required": false
          },
          {
            "name": "ca-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "identifies intermediate ca context in which operation is executed"
          }
        ],
        "responses": {
          "200": {
            "description": "CRL issued by certificate authority\n",
            "schema": {
              "$ref": "#/definitions/CRL"
            }
          },
          "400": {
            "description": "Bad Request\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Invalid Credentials\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "CA Not Found\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "default": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/mutentca/certificate": {
      "post": {
        "tags": [
          "certificates"
        ],
        "summary": "Request a signed certificate from root certificate authority",
        "description": "Returns a signed certificate from root certificate authority\n",
        "operationId": "addCACertificate",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "type": "string",
            "required": false
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSignedCertSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Signed Certificate issued by certificate authority\n",
            "schema": {
              "$ref": "#/definitions/Certificate"
            }
          },
          "400": {
            "description": "Bad Request\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Invalid Credentials\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "default": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "certificates"
        ],
        "summary": "Revoke certificate issued by the root certificate authority",
        "description": "Revokes certificate issued by the root certificate authority\n",
        "operationId": "revokeCACertificate",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "type": "string",
            "required": false
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Certificate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Certificate revoked by certificate authority\n"
          },
          "400": {
            "description": "Bad Request\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Invalid Credentials\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Cert Already Revoked\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "default": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/mutentca/intermediate/{ca-id}/certificate": {
      "post": {
        "tags": [
          "certificates"
        ],
        "summary": "Request a signed certificate from intermediate certificate authority",
        "description": "Returns a signed certificate from intermediate certificate authority\n",
        "operationId": "addIntermediateCACertificate",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "type": "string",
            "required": false
          },
          {
            "name": "ca-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "identifies intermediate ca context in which operation is executed"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSignedCertSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Signed Certificate issued by certificate authority\n",
            "schema": {
              "$ref": "#/definitions/Certificate"
            }
          },
          "400": {
            "description": "Bad Request\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Invalid Credentials\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "CA Not Found\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "default": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "certificates"
        ],
        "summary": "Revoke certificate issued by the intermediate certificate authority",
        "description": "Revokes certificate issued by the intermediate certificate authority\n",
        "operationId": "revokeIntermediateCACertificate",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "type": "string",
            "required": false
          },
          {
            "name": "ca-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "identifies intermediate ca context in which operation is executed"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Certificate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Certificate revoked by certificate authority\n"
          },
          "400": {
            "description": "Bad Request\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Invalid Credentials\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Parent CA Not Found\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Cert Already Revoked\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "default": {
            "description": "Internal Server Error\n",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CACertDetails": {
      "type": "object",
      "properties": {
        "cert": {
          "type": "string",
          "description": "CA certificate"
        },
        "crl": {
          "type": "string",
          "description": "CA certificate's corresponding CRL"
        }
      }
    },
    "CADetails": {
      "type": "object",
      "properties": {
        "caDetails": {
          "type": "array",
          "description": "CA certificates and/or their corresponding CRLs",
          "items": {
            "$ref": "#/definitions/CACertDetails"
          }
        }
      }
    },
    "Certificate": {
      "type": "object",
      "properties": {
        "cert": {
          "type": "string",
          "description": "CA signed certificate"
        },
        "chainoftrust": {
          "type": "string",
          "description": "Chain of trust of the issuing CA"
        }
      }
    },
    "IntermediateCACreateSpec": {
      "type": "object",
      "required": [
        "caId"
      ],
      "properties": {
        "caId": {
          "type": "string",
          "description": "Intermediate CA id"
        },
        "parentCaId": {
          "type": "string",
          "description": "Parent CA id"
        },
        "country": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "CA Country Names"
        },
        "state": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "CA State Names"
        },
        "locality": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "CA Locality Names"
        },
        "organizationalUnit": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "CA Organizational Unit Names"
        },
        "policy": {
          "type": "string",
          "description": "CA Policy"
        },
        "validity": {
          "$ref": "#/definitions/Validity"
        }
      },
      "description": "Certificate Authority Payload"
    },
    "CreateSignedCertSpec": {
      "type": "object",
      "required": [
        "csr"
      ],
      "properties": {
        "csr": {
          "type": "string",
          "description": "CSR that needs to be signed"
        },
        "validity": {
          "$ref": "#/definitions/Validity"
        },
        "signatureAlgorithm": {
          "type": "string",
          "enum": [
            "SHA256"
          ],
          "description": "Certificate signature algorithm"
        }
      }
    },
    "Validity": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "description": "Beginning time"
        },
        "endTime": {
          "type": "string",
          "description": "End time"
        }
      }
    },
    "ChainOfTrust": {
      "type": "object",
      "properties": {
        "chainOfTrust": {
          "type": "string",
          "description": "CA's chain of trust"
        }
      }
    },
    "CRL": {
      "type": "object",
      "properties": {
        "crl": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Certificate Revocation List"
        }
      }
    },
    "Version": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "description": "version"
        }
      }
    },
    "ApiError": {
      "type": "object",
      "required": [
        "errorCode",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "Deprecated: This property contains a short, one-word textual representation\n of the error. E.g. QuotaError, DiskNotFound, InvalidJson, TooManyRequests,\n etc.\n"
        },
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "description": "This property contains the numerical error code.\n"
        },
        "message": {
          "type": "string",
          "description": "This property provides a terse description of the error.\n"
        },
        "requestId": {
          "type": "string",
          "description": "This property provides the requestId associated with the error.\n"
        },
        "detail": {
          "type": "string",
          "description": "This property provides a detailed description of the error.\n"
        }
      },
      "description": "This class captures a single error that occurred while processing\n an API request. The ApiError structure is embedded in a Task and is also the\n entity returned on all 4xx class API errors. In the 4xx case, ApiError is\n the entity returned along with the 4xx response code. The ApiError structure\n also occurs within Task when that task completes with an error. E.g., a Vm\n creation that fails during provisioning. In this case, the VM creation returns\n a 201 created indicating that it has successfully accepted the request. When\n an error occurs after this stage, the error is captured into the task.\n"
    }
  }
}