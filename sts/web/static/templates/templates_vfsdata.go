// Code generated by vfsgen; DO NOT EDIT.

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 12, 6, 17, 37, 50, 324509765, time.UTC),
		},
		"/login.html": &vfsgen۰CompressedFileInfo{
			name:             "login.html",
			modTime:          time.Date(2019, 10, 31, 16, 46, 8, 911153505, time.UTC),
			uncompressedSize: 2069,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x51\x6b\xe3\x38\x10\x7e\xcf\xaf\xd0\xe9\xa9\x85\x4b\x7c\x07\xc7\x71\x70\x76\xe0\x92\xf6\xae\x81\xdb\x36\xa4\x29\xcb\x3e\x2d\x8a\x3c\x8d\xd5\xca\x92\x91\xc6\x4e\x43\xf0\x7f\x5f\x24\x5b\xae\xdd\x24\x74\xb7\x6c\x5f\xda\x19\x7d\xdf\x37\xdf\xc8\x9a\x69\xfc\xcb\xd5\xdd\x7c\xfd\x65\x79\x4d\x32\xcc\xe5\x74\x14\x87\x5f\xc0\xd2\xe9\x88\x10\x42\xe2\x1c\x90\x11\x9e\x31\x63\x01\x13\x5a\xe2\xe3\xf8\x2f\x1a\xf5\xcf\x14\xcb\x21\xa1\x95\x80\x5d\xa1\x0d\x52\xc2\xb5\x42\x50\x98\xd0\x9d\x48\x31\x4b\x52\xa8\x04\x87\xb1\x0f\x7e\x25\x42\x09\x14\x4c\x8e\x2d\x67\x12\x92\xdf\x27\xbf\x75\x5a\x28\x50\xc2\xf4\x70\x98\xfc\xaf\xb7\x42\xad\x5d\x54\xd7\x71\xd4\xa4\x1b\x88\xe5\x46\x14\x48\x70\x5f\x40\x42\x11\x5e\x30\x7a\x62\x15\x6b\xb2\x74\x3a\xf2\x20\xf7\x53\x31\x43\x0a\x66\xed\x4e\x9b\xf4\x2b\x2b\x31\x23\x09\x39\x1c\x26\xd7\x8a\x6d\x24\x2c\xdb\x83\x7f\x4a\xcc\xea\xfa\xef\x21\xc9\x68\xd4\x5c\xcb\x06\xbf\x6c\xa3\xb7\x28\x03\xb6\xd0\xca\xc2\x27\x9d\x42\x83\x5c\xf5\x32\xe7\xd0\x4b\x6d\xf1\x5f\x6d\xf2\x21\x23\x64\x1d\x6b\x40\xdb\x82\x02\x23\xf8\xb5\x31\xda\x34\x94\xff\x7a\x19\x0f\x6f\x2e\x25\x6a\xfa\xff\x9e\x2b\x22\xd6\xf0\x84\x36\xd5\x75\x69\x38\xd8\x25\x73\x97\x10\x3d\xd9\x68\xc6\x2c\xfc\xf9\xc7\xe4\xc9\xd2\xe9\xcf\x92\x94\xee\x43\x9e\x52\x94\x42\x3d\x13\x03\x32\xa1\x16\xf7\x12\x6c\x06\x80\xb4\x5f\x80\x5b\x4b\x49\x66\xe0\xf1\xa4\x34\xb7\x41\xdb\xe1\x8e\x34\x05\xd7\x2a\xa8\x89\x9c\x6d\x21\x7a\x19\x37\xb9\xb3\x8a\x22\xdf\x46\x8f\xac\x72\xa8\x89\xe0\x9a\x92\xe8\x48\xf5\xfe\xe6\x6e\xb5\x9e\x3f\xac\xc9\x62\x7e\x77\xfb\x83\x52\x71\xd4\xcc\x53\xbc\xd1\xe9\x9e\x68\x25\x35\x4b\x13\x9a\x6a\xbe\x02\x96\xee\x2f\x2e\x43\x0f\xa9\xa8\x88\x48\x13\x9a\x33\xa1\xe6\xcd\x14\xb5\x47\x83\x63\xdf\xbb\x7b\x34\x0e\xc3\x84\x02\xd3\x43\x0d\x90\x3b\x90\x5c\xe7\xb0\x86\x17\xa4\x6e\xb4\x3e\xb7\xb1\x76\x93\x95\x8a\xea\x0c\x0d\x41\x31\x85\x33\xc3\x54\xea\x69\xeb\xd7\xf8\x96\xe5\xd0\x91\x4f\xb3\x3b\x7b\x6f\x5c\x35\x8f\xa9\x60\xca\xa3\xac\xd8\xaa\x85\xf2\xce\x88\xab\x71\xdf\xc5\x4e\xde\xc1\x4e\xb0\x43\x89\xd2\x82\x71\x6b\x67\x71\x45\x09\x97\xcc\xda\xb6\xea\x4a\xef\x28\x39\xe6\x79\xae\x50\x45\x89\x03\x76\xc7\x75\x6f\x6e\xe1\x8e\xfb\x8f\x90\x92\x42\x32\x0e\x99\x96\x29\x18\xff\xa9\x1f\x2c\x18\xd7\xff\xd2\xe5\x6f\x7c\xbe\xae\x29\xd1\xea\x19\xf6\x65\x91\x50\xf0\xfb\xc5\xaf\xaf\x59\x89\xa8\xd5\xc5\x65\xf7\x92\x06\x56\x8e\xaf\x7e\xd0\x5d\x58\x5d\x1f\xeb\x2e\xb0\xcf\x77\xf7\x8a\xf8\x80\x39\xf9\xda\x9e\xf3\xf3\xae\x1d\x5b\x6e\x72\x81\x9d\x99\x8d\x67\x92\x8d\x2c\x21\xd8\x09\x88\x8a\xc9\x12\x92\xf0\x0f\xa0\xae\x89\x56\x5c\x0a\xfe\x1c\x10\xa0\xd0\xb8\x61\xf9\xa8\xe9\xb0\x72\xcf\x79\x0e\x60\xd3\xe1\xce\xc8\x7a\x74\x61\xf4\xd6\x80\xb5\xcd\x9d\xb7\xc1\x8c\x19\x4a\xa6\x71\x14\xe2\x77\x2a\x15\xed\xf2\xef\xcd\xf1\xb9\x4e\x4e\x4c\xeb\x30\xf5\x36\x0c\x35\xfc\x06\x3c\xb5\x28\x7a\x84\xf6\xcf\x38\x72\xfb\x69\x3a\xfa\x16\x00\x00\xff\xff\x2a\xd5\x86\x78\x15\x08\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/login.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
