// Code generated by idm_gen. DO NOT EDIT.

package rest

import(
	"io"
	"time"
	"net/url"
	"github.com/francoispqt/gojay"
	"github.com/vmware/lightwave/sts/internal/pkg/diag"
	"github.com/vmware/lightwave/sts/internal/pkg/idm/types"
)


func marshalJSONObjectIDSAttribute(obj types.IDSAttribute, enc *gojay.Encoder) {
	enc.StringKey("id", obj.ID().String())
	enc.StringKey("type", obj.AttrType().String())
	enc.StringKeyOmitEmpty("value", obj.AttrValue().String())
}
func marshalJSONObjectIDSAttributeMap(obj types.IDSAttributeMap, enc *gojay.Encoder) error {
	return enc.EncodeArray(gojay.EncodeArrayFunc(func(enc *gojay.Encoder) {
		obj.Iterate(func(obj types.IDSAttribute) diag.Error {
			enc.Object(gojay.EncodeObjectFunc(func(enc *gojay.Encoder) {
				marshalJSONObjectIDSAttribute(obj, enc)
			}))
			return nil
		})
	}))
}


func unmarshalJSONObjectIDSAttribute(
	b types.IDSAttributeBuilder, dec *gojay.Decoder, key string) error {

	var err error
	switch key {
	case "id" : {
		v0 := ""
		err = dec.String(&v0)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSAttribute from json: %v", err)
		}
		var ve0 types.AttributeID
		err = ve0.From(v0)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSAttribute from json: %v", err)
		}
		b.ID(ve0)
	}
	case "type" : {
		v1 := ""
		err = dec.String(&v1)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSAttribute from json: %v", err)
		}
		var ve1 types.IDSAttributeType
		err = ve1.From(v1)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSAttribute from json: %v", err)
		}
		b.AttrType(ve1)
	}
	case "value" : {
		v2 := ""
		err = dec.String(&v2)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSAttribute from json: %v", err)
		}
		var ve2 types.IDSAttributeValue
		err = ve2.From(v2)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSAttribute from json: %v", err)
		}
		b.AttrValue(ve2)
	}
	}
	return nil
}
func unMarshalJSONObjectIDSAttributeMap(
	b types.IDSAttributeMapBuilder, dec *gojay.Decoder) error {
	err := dec.Array(gojay.DecodeArrayFunc( func(dec *gojay.Decoder) error {
		builder := types.NewIDSAttributeBuilder()
		err := dec.DecodeObject(gojay.DecodeObjectFunc(func(dec *gojay.Decoder, k string) error {
			return unmarshalJSONObjectIDSAttribute(builder, dec, k)
		}))
		if err != nil {
			return err
		}
		v, err := builder.Build()
		if err != nil {
			return err
		}
		b.Add(v)
		return nil
	}))
	if err != nil {
		return err
	}
	return nil
}


func MarshalIDSAttribute(obj types.IDSAttribute, w io.Writer) diag.Error {
	enc := gojay.BorrowEncoder(w)
	defer enc.Release()
	err := enc.EncodeObject(gojay.EncodeObjectFunc(func(enc *gojay.Encoder) {
		marshalJSONObjectIDSAttribute(obj, enc)
	}))
	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed encoding object types.IDSAttribute", err)
	}
	return nil
}
func MarshalIDSAttributeMap(obj types.IDSAttributeMap, w io.Writer) diag.Error {
	enc := gojay.BorrowEncoder(w)
	defer enc.Release()
	err := marshalJSONObjectIDSAttributeMap(obj, enc)
	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed encoding object types.IDSAttribute", err)
	}
	return nil
}


func UnMarshalIDSAttribute(
	b types.IDSAttributeBuilder, r io.Reader) diag.Error {

	dec := gojay.BorrowDecoder(r)
	defer dec.Release()

    err := dec.DecodeObject(gojay.DecodeObjectFunc(func(dec *gojay.Decoder, k string) error {
		return unmarshalJSONObjectIDSAttribute(b, dec, k)
	}))

	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed decoding object types.IDSAttribute", err)
	}

	return nil
}
func UnMarshalIDSAttributeMap( b types.IDSAttributeMapBuilder, r io.Reader) diag.Error {

	dec := gojay.BorrowDecoder(r)
	defer dec.Release()

    err := unMarshalJSONObjectIDSAttributeMap(b, dec)

	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed decoding object types.IDSAttribute", err)
	}

	return nil
}


func marshalJSONObjectIDSConfig(obj types.IDSConfig, enc *gojay.Encoder) {
	enc.StringKey("name", obj.Name())
	enc.StringKey("domain", obj.Domain())
	enc.StringKey("alias", obj.Alias())
	enc.StringKey("type", obj.Provider().String())
	enc.StringKey("authType", obj.AuthType().String())
	enc.ArrayKey(
		"addresses", gojay.EncodeArrayFunc(func(enc *gojay.Encoder) {
		for _, v := range obj.Addresses() {
			enc.String(v.String())
		}
	}))
	enc.StringKeyOmitEmpty("userName", obj.UserName())
	enc.StringKeyOmitEmpty("user_base_dn", obj.UserBaseDN())
	enc.StringKeyOmitEmpty("group_base_dn", obj.GroupBaseDN())
	enc.ArrayKeyOmitEmpty(
		"attributes",
		gojay.EncodeArrayFunc(func(enc *gojay.Encoder) {
			obj.Attributes().Iterate(func(obj types.IDSAttribute) diag.Error {
				enc.Object(gojay.EncodeObjectFunc(func(enc *gojay.Encoder) {
					marshalJSONObjectIDSAttribute(obj, enc)
				}))
				return nil
			})
	}))
}
func marshalJSONObjectIDSConfigList(objs []types.IDSConfig, enc *gojay.Encoder) error {
	return enc.EncodeArray(gojay.EncodeArrayFunc(func(enc *gojay.Encoder) {
		for _, obj := range objs {
			enc.Object(gojay.EncodeObjectFunc(func(enc *gojay.Encoder) {
				marshalJSONObjectIDSConfig(obj, enc)
			}))
		}
	}))
}


func unmarshalJSONObjectIDSConfig(
	b types.IDSConfigBuilder, dec *gojay.Decoder, key string) error {

	var err error
	switch key {
	case "name" : {
		str := ""
		err = dec.String(&str)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSConfig from json: %v", err)
		}
		b.Name(str)
	}
	case "domain" : {
		str := ""
		err = dec.String(&str)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSConfig from json: %v", err)
		}
		b.Domain(str)
	}
	case "alias" : {
		str := ""
		err = dec.String(&str)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSConfig from json: %v", err)
		}
		b.Alias(str)
	}
	case "type" : {
		v3 := ""
		err = dec.String(&v3)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSConfig from json: %v", err)
		}
		var ve3 types.ProviderType
		err = ve3.From(v3)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSConfig from json: %v", err)
		}
		b.Provider(ve3)
	}
	case "authType" : {
		v4 := ""
		err = dec.String(&v4)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSConfig from json: %v", err)
		}
		var ve4 types.AuthType
		err = ve4.From(v4)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSConfig from json: %v", err)
		}
		b.AuthType(ve4)
	}
	case "addresses" : {var arr []*url.URL
		err = dec.DecodeArray(gojay.DecodeArrayFunc(func(dec *gojay.Decoder) error {
			var str string
			err = dec.String(&str)
			if err != nil {
				return err
			}
			if len(arr) <= 0 {
				arr = make([]*url.URL, 0, 5)
			}
			url, err := url.Parse(str)
			if err != nil {
				return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSConfig from json: %v", err)
			}

			arr = append(arr, url)

			return nil
		}))
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSConfig from json: %v", err)
		}
		b.Addresses(arr)
	}
	case "userName" : {
		str := ""
		err = dec.String(&str)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSConfig from json: %v", err)
		}
		b.UserName(str)
	}
	case "user_base_dn" : {
		str := ""
		err = dec.String(&str)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSConfig from json: %v", err)
		}
		b.UserBaseDN(str)
	}
	case "group_base_dn" : {
		str := ""
		err = dec.String(&str)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal IDSConfig from json: %v", err)
		}
		b.GroupBaseDN(str)
	}
	case "attributes" : {
		builder0 := types.NewIDSAttributeMapBuilder()
		err = unMarshalJSONObjectIDSAttributeMap(builder0, dec)
		if err != nil {
			return err
		}
		map0, err := builder0.Build()
		if err != nil {
			return err
		}
		b.Attributes(map0)
	}
	}
	return nil
}


func MarshalIDSConfig(obj types.IDSConfig, w io.Writer) diag.Error {
	enc := gojay.BorrowEncoder(w)
	defer enc.Release()
	err := enc.EncodeObject(gojay.EncodeObjectFunc(func(enc *gojay.Encoder) {
		marshalJSONObjectIDSConfig(obj, enc)
	}))
	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed encoding object types.IDSConfig", err)
	}
	return nil
}
func MarshalIDSConfigList(objs []types.IDSConfig, w io.Writer) diag.Error {
	enc := gojay.BorrowEncoder(w)
	defer enc.Release()
	err := marshalJSONObjectIDSConfigList(objs, enc)
	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed encoding object types.IDSConfig", err)
	}
	return nil
}


func UnMarshalIDSConfig(
	b types.IDSConfigBuilder, r io.Reader) diag.Error {

	dec := gojay.BorrowDecoder(r)
	defer dec.Release()

    err := dec.DecodeObject(gojay.DecodeObjectFunc(func(dec *gojay.Decoder, k string) error {
		return unmarshalJSONObjectIDSConfig(b, dec, k)
	}))

	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed decoding object types.IDSConfig", err)
	}

	return nil
}


func marshalJSONObjectOidcClient(obj types.OidcClient, enc *gojay.Encoder) {
	enc.StringKey("id", obj.ID())
	enc.ArrayKey(
		"redirect_uris", gojay.EncodeArrayFunc(func(enc *gojay.Encoder) {
		for _, v := range obj.RedirectURIs() {
			enc.String(v.String())
		}
	}))
	enc.StringKey("auth_method", obj.AuthMethod().String())
	enc.ArrayKey(
		"post_logout_redirect_uris", gojay.EncodeArrayFunc(func(enc *gojay.Encoder) {
		for _, v := range obj.PostLogoutRedirectURIs() {
			enc.String(v.String())
		}
	}))
	enc.StringKey("logout_uri",  obj.LogoutURI().String())
	vi5 := int64(obj.AssertionLifetime()/time.Millisecond)
	enc.Int64Key("assertion_lifetime", vi5)
	enc.BoolKey("cross_tenant", obj.CrossTenant())
}
func marshalJSONObjectOidcClientList(objs []types.OidcClient, enc *gojay.Encoder) error {
	return enc.EncodeArray(gojay.EncodeArrayFunc(func(enc *gojay.Encoder) {
		for _, obj := range objs {
			enc.Object(gojay.EncodeObjectFunc(func(enc *gojay.Encoder) {
				marshalJSONObjectOidcClient(obj, enc)
			}))
		}
	}))
}


func unmarshalJSONObjectOidcClient(
	b types.OidcClientBuilder, dec *gojay.Decoder, key string) error {

	var err error
	switch key {
	case "id" : {
		str := ""
		err = dec.String(&str)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClient from json: %v", err)
		}
		b.ID(str)
	}
	case "redirect_uris" : {var arr []*url.URL
		err = dec.DecodeArray(gojay.DecodeArrayFunc(func(dec *gojay.Decoder) error {
			var str string
			err = dec.String(&str)
			if err != nil {
				return err
			}
			if len(arr) <= 0 {
				arr = make([]*url.URL, 0, 5)
			}
			url, err := url.Parse(str)
			if err != nil {
				return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClient from json: %v", err)
			}

			arr = append(arr, url)

			return nil
		}))
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClient from json: %v", err)
		}
		b.RedirectURIs(arr)
	}
	case "auth_method" : {
		v2 := ""
		err = dec.String(&v2)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClient from json: %v", err)
		}
		var ve2 types.OidcClientAuthMethod
		err = ve2.From(v2)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClient from json: %v", err)
		}
		b.AuthMethod(ve2)
	}
	case "post_logout_redirect_uris" : {var arr []*url.URL
		err = dec.DecodeArray(gojay.DecodeArrayFunc(func(dec *gojay.Decoder) error {
			var str string
			err = dec.String(&str)
			if err != nil {
				return err
			}
			if len(arr) <= 0 {
				arr = make([]*url.URL, 0, 5)
			}
			url, err := url.Parse(str)
			if err != nil {
				return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClient from json: %v", err)
			}

			arr = append(arr, url)

			return nil
		}))
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClient from json: %v", err)
		}
		b.PostLogoutRedirectURIs(arr)
	}
	case "logout_uri" : {
		v4 := ""
		err = dec.String(&v4)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClient from json: %v", err)
		}
		url4, err := url.Parse(v4)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClient from json: %v", err)
		}
		b.LogoutURI(url4)
	}
	case "assertion_lifetime" : {
		var vi5 int64
		err = dec.Int64(&vi5)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClient from json: %v", err)
		}
		var vd5 time.Duration
		vd5 = time.Duration(vi5)*time.Millisecond
		b.AssertionLifetime(vd5)
	}
	case "cross_tenant" : {
		var vb6 bool
		err = dec.Bool(&vb6)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClient from json: %v", err)
		}
		b.CrossTenant(vb6)
	}
	}
	return nil
}


func MarshalOidcClient(obj types.OidcClient, w io.Writer) diag.Error {
	enc := gojay.BorrowEncoder(w)
	defer enc.Release()
	err := enc.EncodeObject(gojay.EncodeObjectFunc(func(enc *gojay.Encoder) {
		marshalJSONObjectOidcClient(obj, enc)
	}))
	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed encoding object types.OidcClient", err)
	}
	return nil
}
func MarshalOidcClientList(objs []types.OidcClient, w io.Writer) diag.Error {
	enc := gojay.BorrowEncoder(w)
	defer enc.Release()
	err := marshalJSONObjectOidcClientList(objs, enc)
	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed encoding object types.OidcClient", err)
	}
	return nil
}


func UnMarshalOidcClient(
	b types.OidcClientBuilder, r io.Reader) diag.Error {

	dec := gojay.BorrowDecoder(r)
	defer dec.Release()

    err := dec.DecodeObject(gojay.DecodeObjectFunc(func(dec *gojay.Decoder, k string) error {
		return unmarshalJSONObjectOidcClient(b, dec, k)
	}))

	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed decoding object types.OidcClient", err)
	}

	return nil
}


func marshalJSONObjectOidcClientMeta(obj types.OidcClientMeta, enc *gojay.Encoder) {
	enc.ArrayKey(
		"redirect_uris", gojay.EncodeArrayFunc(func(enc *gojay.Encoder) {
		for _, v := range obj.RedirectURIs() {
			enc.String(v.String())
		}
	}))
	enc.StringKey("auth_method", obj.AuthMethod().String())
	enc.ArrayKey(
		"post_logout_redirect_uris", gojay.EncodeArrayFunc(func(enc *gojay.Encoder) {
		for _, v := range obj.PostLogoutRedirectURIs() {
			enc.String(v.String())
		}
	}))
	enc.StringKey("logout_uri",  obj.LogoutURI().String())
	vi4 := int64(obj.AssertionLifetime()/time.Millisecond)
	enc.Int64Key("assertion_lifetime", vi4)
	enc.BoolKey("cross_tenant", obj.CrossTenant())
}


func unmarshalJSONObjectOidcClientMeta(
	b types.OidcClientBuilder, dec *gojay.Decoder, key string) error {

	var err error
	switch key {
	case "redirect_uris" : {var arr []*url.URL
		err = dec.DecodeArray(gojay.DecodeArrayFunc(func(dec *gojay.Decoder) error {
			var str string
			err = dec.String(&str)
			if err != nil {
				return err
			}
			if len(arr) <= 0 {
				arr = make([]*url.URL, 0, 5)
			}
			url, err := url.Parse(str)
			if err != nil {
				return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClientMeta from json: %v", err)
			}

			arr = append(arr, url)

			return nil
		}))
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClientMeta from json: %v", err)
		}
		b.RedirectURIs(arr)
	}
	case "auth_method" : {
		v1 := ""
		err = dec.String(&v1)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClientMeta from json: %v", err)
		}
		var ve1 types.OidcClientAuthMethod
		err = ve1.From(v1)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClientMeta from json: %v", err)
		}
		b.AuthMethod(ve1)
	}
	case "post_logout_redirect_uris" : {var arr []*url.URL
		err = dec.DecodeArray(gojay.DecodeArrayFunc(func(dec *gojay.Decoder) error {
			var str string
			err = dec.String(&str)
			if err != nil {
				return err
			}
			if len(arr) <= 0 {
				arr = make([]*url.URL, 0, 5)
			}
			url, err := url.Parse(str)
			if err != nil {
				return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClientMeta from json: %v", err)
			}

			arr = append(arr, url)

			return nil
		}))
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClientMeta from json: %v", err)
		}
		b.PostLogoutRedirectURIs(arr)
	}
	case "logout_uri" : {
		v3 := ""
		err = dec.String(&v3)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClientMeta from json: %v", err)
		}
		url3, err := url.Parse(v3)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClientMeta from json: %v", err)
		}
		b.LogoutURI(url3)
	}
	case "assertion_lifetime" : {
		var vi4 int64
		err = dec.Int64(&vi4)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClientMeta from json: %v", err)
		}
		var vd4 time.Duration
		vd4 = time.Duration(vi4)*time.Millisecond
		b.AssertionLifetime(vd4)
	}
	case "cross_tenant" : {
		var vb5 bool
		err = dec.Bool(&vb5)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal OidcClientMeta from json: %v", err)
		}
		b.CrossTenant(vb5)
	}
	}
	return nil
}


func MarshalOidcClientMeta(obj types.OidcClientMeta, w io.Writer) diag.Error {
	enc := gojay.BorrowEncoder(w)
	defer enc.Release()
	err := enc.EncodeObject(gojay.EncodeObjectFunc(func(enc *gojay.Encoder) {
		marshalJSONObjectOidcClientMeta(obj, enc)
	}))
	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed encoding object types.OidcClientMeta", err)
	}
	return nil
}


func UnMarshalOidcClientMeta(
	b types.OidcClientBuilder, r io.Reader) diag.Error {

	dec := gojay.BorrowDecoder(r)
	defer dec.Release()

    err := dec.DecodeObject(gojay.DecodeObjectFunc(func(dec *gojay.Decoder, k string) error {
		return unmarshalJSONObjectOidcClientMeta(b, dec, k)
	}))

	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed decoding object types.OidcClientMeta", err)
	}

	return nil
}


func marshalJSONObjectTenant(obj types.Tenant, enc *gojay.Encoder) {
	enc.StringKey("name", obj.Name().String())
	enc.StringKey("domain", obj.Domain())
	vi2 := int64(obj.ClockTolerance()/time.Millisecond)
	enc.Int64Key("clock_tolerance", vi2)
	vi3 := int64(obj.MaxBearerLifetime()/time.Millisecond)
	enc.Int64Key("max_bearer_lifetime", vi3)
	vi4 := int64(obj.MaxHOKLifetime()/time.Millisecond)
	enc.Int64Key("max_hok_lifetime", vi4)
	vi5 := int64(obj.MaxBearerRefreshLifetime()/time.Millisecond)
	enc.Int64Key("max_bearer_refresh_lifetime", vi5)
	vi6 := int64(obj.MaxHOKRefreshLifetime()/time.Millisecond)
	enc.Int64Key("max_hok_refresh_lifetime", vi6)
	vi7 := int64(obj.SessionLifetime()/time.Millisecond)
	enc.Int64Key("session_lifetime", vi7)
	enc.Uint32Key("delegation_count", obj.DelegationCount())
	enc.Uint32Key("renew_count", obj.RenewCount())
}
func marshalJSONObjectTenantList(objs []types.Tenant, enc *gojay.Encoder) error {
	return enc.EncodeArray(gojay.EncodeArrayFunc(func(enc *gojay.Encoder) {
		for _, obj := range objs {
			enc.Object(gojay.EncodeObjectFunc(func(enc *gojay.Encoder) {
				marshalJSONObjectTenant(obj, enc)
			}))
		}
	}))
}


func unmarshalJSONObjectTenant(
	b types.TenantBuilder, dec *gojay.Decoder, key string) error {

	var err error
	switch key {
	case "name" : {
		v0 := ""
		err = dec.String(&v0)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal Tenant from json: %v", err)
		}
		var ve0 diag.TenantID
		err = ve0.From(v0)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal Tenant from json: %v", err)
		}
		b.Name(ve0)
	}
	case "domain" : {
		str := ""
		err = dec.String(&str)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal Tenant from json: %v", err)
		}
		b.Domain(str)
	}
	case "clock_tolerance" : {
		var vi2 int64
		err = dec.Int64(&vi2)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal Tenant from json: %v", err)
		}
		var vd2 time.Duration
		vd2 = time.Duration(vi2)*time.Millisecond
		b.ClockTolerance(vd2)
	}
	case "max_bearer_lifetime" : {
		var vi3 int64
		err = dec.Int64(&vi3)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal Tenant from json: %v", err)
		}
		var vd3 time.Duration
		vd3 = time.Duration(vi3)*time.Millisecond
		b.MaxBearerLifetime(vd3)
	}
	case "max_hok_lifetime" : {
		var vi4 int64
		err = dec.Int64(&vi4)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal Tenant from json: %v", err)
		}
		var vd4 time.Duration
		vd4 = time.Duration(vi4)*time.Millisecond
		b.MaxHOKLifetime(vd4)
	}
	case "max_bearer_refresh_lifetime" : {
		var vi5 int64
		err = dec.Int64(&vi5)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal Tenant from json: %v", err)
		}
		var vd5 time.Duration
		vd5 = time.Duration(vi5)*time.Millisecond
		b.MaxBearerRefreshLifetime(vd5)
	}
	case "max_hok_refresh_lifetime" : {
		var vi6 int64
		err = dec.Int64(&vi6)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal Tenant from json: %v", err)
		}
		var vd6 time.Duration
		vd6 = time.Duration(vi6)*time.Millisecond
		b.MaxHOKRefreshLifetime(vd6)
	}
	case "session_lifetime" : {
		var vi7 int64
		err = dec.Int64(&vi7)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal Tenant from json: %v", err)
		}
		var vd7 time.Duration
		vd7 = time.Duration(vi7)*time.Millisecond
		b.SessionLifetime(vd7)
	}
	case "delegation_count" : {
		var vu8 uint32
		err = dec.Uint32(&vu8)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal Tenant from json: %v", err)
		}
		b.DelegationCount(vu8)
	}
	case "renew_count" : {
		var vu9 uint32
		err = dec.Uint32(&vu9)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal Tenant from json: %v", err)
		}
		b.RenewCount(vu9)
	}
	}
	return nil
}


func MarshalTenant(obj types.Tenant, w io.Writer) diag.Error {
	enc := gojay.BorrowEncoder(w)
	defer enc.Release()
	err := enc.EncodeObject(gojay.EncodeObjectFunc(func(enc *gojay.Encoder) {
		marshalJSONObjectTenant(obj, enc)
	}))
	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed encoding object types.Tenant", err)
	}
	return nil
}
func MarshalTenantList(objs []types.Tenant, w io.Writer) diag.Error {
	enc := gojay.BorrowEncoder(w)
	defer enc.Release()
	err := marshalJSONObjectTenantList(objs, enc)
	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed encoding object types.Tenant", err)
	}
	return nil
}


func UnMarshalTenant(
	b types.TenantBuilder, r io.Reader) diag.Error {

	dec := gojay.BorrowDecoder(r)
	defer dec.Release()

    err := dec.DecodeObject(gojay.DecodeObjectFunc(func(dec *gojay.Decoder, k string) error {
		return unmarshalJSONObjectTenant(b, dec, k)
	}))

	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed decoding object types.Tenant", err)
	}

	return nil
}


func marshalJSONObjectTokenPolicy(obj types.TokenPolicy, enc *gojay.Encoder) {
	vi0 := int64(obj.ClockTolerance()/time.Millisecond)
	enc.Int64Key("clock_tolerance", vi0)
	vi1 := int64(obj.MaxBearerLifetime()/time.Millisecond)
	enc.Int64Key("max_bearer_lifetime", vi1)
	vi2 := int64(obj.MaxHOKLifetime()/time.Millisecond)
	enc.Int64Key("max_hok_lifetime", vi2)
	vi3 := int64(obj.MaxBearerRefreshLifetime()/time.Millisecond)
	enc.Int64Key("max_bearer_refresh_lifetime", vi3)
	vi4 := int64(obj.MaxHOKRefreshLifetime()/time.Millisecond)
	enc.Int64Key("max_hok_refresh_lifetime", vi4)
	vi5 := int64(obj.SessionLifetime()/time.Millisecond)
	enc.Int64Key("session_lifetime", vi5)
	enc.Uint32Key("delegation_count", obj.DelegationCount())
	enc.Uint32Key("renew_count", obj.RenewCount())
}


func unmarshalJSONObjectTokenPolicy(
	b types.TenantBuilder, dec *gojay.Decoder, key string) error {

	var err error
	switch key {
	case "clock_tolerance" : {
		var vi0 int64
		err = dec.Int64(&vi0)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal TokenPolicy from json: %v", err)
		}
		var vd0 time.Duration
		vd0 = time.Duration(vi0)*time.Millisecond
		b.ClockTolerance(vd0)
	}
	case "max_bearer_lifetime" : {
		var vi1 int64
		err = dec.Int64(&vi1)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal TokenPolicy from json: %v", err)
		}
		var vd1 time.Duration
		vd1 = time.Duration(vi1)*time.Millisecond
		b.MaxBearerLifetime(vd1)
	}
	case "max_hok_lifetime" : {
		var vi2 int64
		err = dec.Int64(&vi2)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal TokenPolicy from json: %v", err)
		}
		var vd2 time.Duration
		vd2 = time.Duration(vi2)*time.Millisecond
		b.MaxHOKLifetime(vd2)
	}
	case "max_bearer_refresh_lifetime" : {
		var vi3 int64
		err = dec.Int64(&vi3)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal TokenPolicy from json: %v", err)
		}
		var vd3 time.Duration
		vd3 = time.Duration(vi3)*time.Millisecond
		b.MaxBearerRefreshLifetime(vd3)
	}
	case "max_hok_refresh_lifetime" : {
		var vi4 int64
		err = dec.Int64(&vi4)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal TokenPolicy from json: %v", err)
		}
		var vd4 time.Duration
		vd4 = time.Duration(vi4)*time.Millisecond
		b.MaxHOKRefreshLifetime(vd4)
	}
	case "session_lifetime" : {
		var vi5 int64
		err = dec.Int64(&vi5)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal TokenPolicy from json: %v", err)
		}
		var vd5 time.Duration
		vd5 = time.Duration(vi5)*time.Millisecond
		b.SessionLifetime(vd5)
	}
	case "delegation_count" : {
		var vu6 uint32
		err = dec.Uint32(&vu6)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal TokenPolicy from json: %v", err)
		}
		b.DelegationCount(vu6)
	}
	case "renew_count" : {
		var vu7 uint32
		err = dec.Uint32(&vu7)
		if err != nil {
			return diag.MakeError(types.IdmErrorInvalidArgument, "Failed to un-marshal TokenPolicy from json: %v", err)
		}
		b.RenewCount(vu7)
	}
	}
	return nil
}


func MarshalTokenPolicy(obj types.TokenPolicy, w io.Writer) diag.Error {
	enc := gojay.BorrowEncoder(w)
	defer enc.Release()
	err := enc.EncodeObject(gojay.EncodeObjectFunc(func(enc *gojay.Encoder) {
		marshalJSONObjectTokenPolicy(obj, enc)
	}))
	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed encoding object types.TokenPolicy", err)
	}
	return nil
}


func UnMarshalTokenPolicy(
	b types.TenantBuilder, r io.Reader) diag.Error {

	dec := gojay.BorrowDecoder(r)
	defer dec.Release()

    err := dec.DecodeObject(gojay.DecodeObjectFunc(func(dec *gojay.Decoder, k string) error {
		return unmarshalJSONObjectTokenPolicy(b, dec, k)
	}))

	if err != nil {
		return diag.MakeError(types.IdmErrorGeneric, "failed decoding object types.TokenPolicy", err)
	}

	return nil
}
