// Code generated by idm_gen. DO NOT EDIT.

package config

import(
	"github.com/vmware/lightwave/sts/internal/pkg/idm/types"
	"github.com/vmware/lightwave/sts/internal/pkg/diag"
	"github.com/vmware/lightwave/sts/internal/pkg/idm/ldap"
)

func ldapDnFromObjectDeploymentInfo(parentDn string, obj types.DeploymentInfo) string {
	return "cn=Deployment," + ldapContainerDnDeploymentInfo(parentDn)
}

func ldapDnFromCnDeploymentInfo(parentDn string) string {
	return "cn=" +"Deployment" + "," + ldapContainerDnDeploymentInfo(parentDn)
}

func ldapContainerDnDeploymentInfo(parentDn string) string { return parentDn
}

func ldapModsDeploymentInfo(obj types.DeploymentInfo) ([]ldap.AttributeMod, diag.Error) {

	attrMods := make([]ldap.AttributeMod, 0, 2)
	var modType ldap.ModType
	var mod ldap.AttributeMod
	var ldapVal ldap.Value
	var err diag.Error
	modType = ldap.ModTypeReplace
	if len(obj.PublicEndpoint()) <= 0 {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForString(obj.PublicEndpoint())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSPublicEndpoint", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if len(obj.SchemaVersion()) <= 0 {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForString(obj.SchemaVersion())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSSchemaVersion", ldapVal)
	attrMods = append(attrMods, mod)

	return attrMods, nil
}
func ldapAttrsDeploymentInfo(obj types.DeploymentInfo) ([]ldap.Attribute, diag.Error) {

	attrs := make([]ldap.Attribute, 0, 2 + 1 + 1)
	var attr ldap.Attribute
	var ldapVal ldap.Value
	var err diag.Error

	// objectClass
	ldapVal, err = ldap.ValueForString("lightwaveSTSDeployment")
	if err != nil {
		return []ldap.Attribute{}, err
	}
	attr = ldap.NewAttribute("objectClass", ldapVal)
	attrs = append(attrs, attr)
	ldapVal, err = ldap.ValueForString("Deployment")
	if err != nil {
		return []ldap.Attribute{}, err
	}
	attr = ldap.NewAttribute("cn", ldapVal)
	attrs = append(attrs, attr)
	
	ldapVal, err = ldap.ValueForString(obj.PublicEndpoint())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSPublicEndpoint", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForString(obj.SchemaVersion())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSSchemaVersion", ldapVal)
		attrs = append(attrs, attr)
	}

	return attrs, nil
}

func ldapAttrNamesDeploymentInfo() []string {
	return ldapAttrNamesDeploymentInfoConst
}

var(
	ldapAttrNamesDeploymentInfoConst = []string{
		"lightwaveSTSPublicEndpoint",
		"lightwaveSTSSchemaVersion",
	}
)

func ldapFromEntryDeploymentInfo(e ldap.Entry, ctxt diag.RequestContext) (types.DeploymentInfoBuilder,diag.Error) {
	builder := types.NewDeploymentInfoBuilder()
	var err diag.Error
	var v ldap.Value
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSPublicEndpoint", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi0, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		builder.PublicEndpoint(vi0)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSSchemaVersion", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi1, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		builder.SchemaVersion(vi1)
	}

	return builder, nil
}

func ldapCreateDeploymentInfo(conn ldap.Connection, parentDn string, obj types.DeploymentInfo, ctxt diag.RequestContext) diag.Error {
	objectDn := ldapDnFromObjectDeploymentInfo(parentDn, obj)
	attributes, err := ldapAttrsDeploymentInfo(obj)
	if err != nil {
		return err
	}

	err = conn.Add(objectDn, attributes, ctxt)
	if err != nil {
		return err
	}

	return nil
}

func ldapUpdateDeploymentInfo(conn ldap.Connection, parentDn string, obj types.DeploymentInfo, ctxt diag.RequestContext) diag.Error {

	objectDn := ldapDnFromObjectDeploymentInfo(parentDn, obj)
	attrMods, err := ldapModsDeploymentInfo(obj)
	if err != nil {
		return err
	}

	err = conn.Modify(objectDn, attrMods, ctxt)
	if err != nil {
		return err
	}
	if err != nil {
		return err
	}
	return nil
}



func ldapDeleteDeploymentInfo(conn ldap.Connection, parentDn string, ctxt diag.RequestContext) diag.Error {

	objectDn := ldapDnFromCnDeploymentInfo(parentDn)
	err := conn.Delete(objectDn, ctxt)
	if err != nil {
		if !ldap.IsNoSuchObjectError(err) {
			return err
		}
	}

	return nil
}

func ldapGetDeploymentInfo(conn ldap.Connection, parentDn string, ctxt diag.RequestContext) (types.DeploymentInfo, diag.Error) {

	var err diag.Error
	objectDn := ldapDnFromCnDeploymentInfo(parentDn)
	attrs := ldapAttrNamesDeploymentInfo()

	// go-ldap does not allow for empty filter, check on this....
	msg, err := conn.Search(objectDn, ldap.ScopeBase, "(objectClass=*)", attrs, false, 0, 0, ctxt)
	if err != nil {
		return nil, err
	}
	defer msg.Close()

	len, err := msg.Len(ctxt)
	if err != nil {
		return nil, err
	}

	if len != 1 {
		// todo: return error
		//return nil, err
	}

	var b types.DeploymentInfoBuilder

	err = msg.IterateEntries(func(e ldap.Entry, ctxt diag.RequestContext) diag.Error {
		b, err = ldapFromEntryDeploymentInfo(e, ctxt)
		if err != nil {
			return err
		}
		return nil
	}, ctxt)

	if err != nil {
		return nil, err
	}

	return b.Build()
}


func ldapListDeploymentInfo(conn ldap.Connection, parentDn string, ctxt diag.RequestContext) ([]types.DeploymentInfo, diag.Error) {
	var err diag.Error
	cdn := ldapContainerDnDeploymentInfo(parentDn)
	attrs := ldapAttrNamesDeploymentInfo()

	msg, err := conn.Search(
		cdn, ldap.ScopeOneLevel, "(objectClass=lightwaveSTSDeployment)",
		attrs, false, 0, 0, ctxt)
	if err != nil {
		return []types.DeploymentInfo{}, err
	}
	defer msg.Close()
	num, err := msg.Len(ctxt)
	if err != nil {
		return []types.DeploymentInfo{}, err
	}
	res := make([]types.DeploymentInfo, 0, num)

	err = msg.IterateEntries(func(e ldap.Entry, ctxt diag.RequestContext) diag.Error {

		b, err := ldapFromEntryDeploymentInfo(e, ctxt)
		if err != nil {
			return err
		}

		resv, err := b.Build()
		if err != nil {
			return err
		}
		res = append(res, resv)
		return nil
	}, ctxt)

	if err != nil {
		return []types.DeploymentInfo{}, err
	}
	return res, nil
}
func ldapDnFromObjectIDSAttribute(parentDn string, obj types.IDSAttribute) string {
	return "cn=" + obj.ID().String()+ "," + ldapContainerDnIDSAttribute(parentDn)
}

func ldapDnFromCnIDSAttribute(parentDn string, name string) string {
	return "cn=" +name + "," + ldapContainerDnIDSAttribute(parentDn)
}

func ldapContainerDnIDSAttribute(parentDn string) string {
	return "cn=Attributes," + parentDn
}

func ldapModsIDSAttribute(obj types.IDSAttribute) ([]ldap.AttributeMod, diag.Error) {

	attrMods := make([]ldap.AttributeMod, 0, 2)
	var modType ldap.ModType
	var mod ldap.AttributeMod
	var ldapVal ldap.Value
	var err diag.Error
	modType = ldap.ModTypeReplace
	if len(obj.AttrType().String()) <= 0 {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForString(obj.AttrType().String())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSAttributeType", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForString(obj.AttrValue().String())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSAttributeValue", ldapVal)
	attrMods = append(attrMods, mod)

	return attrMods, nil
}
func ldapAttrsIDSAttribute(obj types.IDSAttribute) ([]ldap.Attribute, diag.Error) {

	attrs := make([]ldap.Attribute, 0, 3 + 1)
	var attr ldap.Attribute
	var ldapVal ldap.Value
	var err diag.Error

	// objectClass
	ldapVal, err = ldap.ValueForString("lightwaveSTSIDSAttribute")
	if err != nil {
		return []ldap.Attribute{}, err
	}
	attr = ldap.NewAttribute("objectClass", ldapVal)
	attrs = append(attrs, attr)
	ldapVal, err = ldap.ValueForString(obj.ID().String())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("cn", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForString(obj.AttrType().String())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSAttributeType", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForString(obj.AttrValue().String())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSAttributeValue", ldapVal)
		attrs = append(attrs, attr)
	}

	return attrs, nil
}

func ldapAttrNamesIDSAttribute() []string {
	return ldapAttrNamesIDSAttributeConst
}

var(
	ldapAttrNamesIDSAttributeConst = []string{
		"cn",
		"lightwaveSTSAttributeType",
		"lightwaveSTSAttributeValue",
	}
)

func ldapFromEntryIDSAttribute(e ldap.Entry, ctxt diag.RequestContext) (types.IDSAttributeBuilder,diag.Error) {
	builder := types.NewIDSAttributeBuilder()
	var err diag.Error
	var v ldap.Value
	v, err = ldap.GetAttributeValue(e, "cn", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		var v0 types.AttributeID
		vi0, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		err = v0.From(vi0)
		if err != nil {
			return nil, err
		}
		builder.ID(v0)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSAttributeType", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		var v1 types.IDSAttributeType
		vi1, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		err = v1.From(vi1)
		if err != nil {
			return nil, err
		}
		builder.AttrType(v1)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSAttributeValue", false, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		var v2 types.IDSAttributeValue
		vi2, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		err = v2.From(vi2)
		if err != nil {
			return nil, err
		}
		builder.AttrValue(v2)
	}

	return builder, nil
}

func ldapCreateIDSAttribute(conn ldap.Connection, parentDn string, obj types.IDSAttribute, ctxt diag.RequestContext) diag.Error {
	err := EnsureContainer(conn, parentDn, "Attributes", ctxt)
	if err != nil {
		return err
	}
	objectDn := ldapDnFromObjectIDSAttribute(parentDn, obj)
	attributes, err := ldapAttrsIDSAttribute(obj)
	if err != nil {
		return err
	}

	err = conn.Add(objectDn, attributes, ctxt)
	if err != nil {
		return err
	}

	return nil
}
func ldapCreateIDSAttributeMap(conn ldap.Connection, parentDn string, objs types.IDSAttributeMap, ctxt diag.RequestContext) diag.Error {
	err := EnsureContainer(conn, parentDn, "Attributes", ctxt)
	if err != nil {
		return err
	}
	err = objs.Iterate(func(obj types.IDSAttribute) diag.Error {
		objectDn := ldapDnFromObjectIDSAttribute(parentDn, obj)
		attributes, err := ldapAttrsIDSAttribute(obj)
		if err != nil {
			return err
		}

		err = conn.Add(objectDn, attributes, ctxt)
		if err != nil {
			return err
		}

	return nil
	})

	return err
}

func ldapUpdateIDSAttribute(conn ldap.Connection, parentDn string, obj types.IDSAttribute, ctxt diag.RequestContext) diag.Error {

	objectDn := ldapDnFromObjectIDSAttribute(parentDn, obj)
	attrMods, err := ldapModsIDSAttribute(obj)
	if err != nil {
		return err
	}

	err = conn.Modify(objectDn, attrMods, ctxt)
	if err != nil {
		return err
	}
	if err != nil {
		return err
	}
	return nil
}
func ldapUpdateIDSAttributeMap(conn ldap.Connection, parentDn string, objs types.IDSAttributeMap, ctxt diag.RequestContext) diag.Error {
	cdn := ldapContainerDnIDSAttribute(parentDn)

	msg, err := conn.Search(
		cdn, ldap.ScopeOneLevel, "(objectClass=lightwaveSTSIDSAttribute)",
		[]string{}, false, 0, 0, ctxt)
	if err != nil {
		return err
	}
	defer msg.Close()

	newObjects := make(map[string]types.IDSAttribute, objs.Len())
	objs.Iterate(func(obj types.IDSAttribute) diag.Error {
		newObjects[ldapDnFromObjectIDSAttribute(parentDn, obj)] = obj
		return nil
	})

	err = msg.IterateEntries(func(e ldap.Entry, ctxt diag.RequestContext) diag.Error {

		dn, err := e.Dn(ctxt)
		if err != nil {
			return err
		}

		obj, ok := newObjects[dn]
		if !ok {
			// delete
			err := conn.Delete(dn, ctxt)
			if err != nil {
				if !ldap.IsNoSuchObjectError(err) {
					return err
				}
			}
		} else {
			// update
			err := ldapUpdateIDSAttribute(conn, parentDn, obj, ctxt)
			if err != nil {
				return err
			}
		}

		delete(newObjects, dn)

		return nil
	}, ctxt)

	if err != nil {
		return err
	}

	for _, no := range newObjects {
		err := ldapCreateIDSAttribute(conn, parentDn, no, ctxt)
		if err != nil {
			return err
		}
	}

	return nil
}



func ldapDeleteIDSAttribute(conn ldap.Connection, parentDn string, name string, ctxt diag.RequestContext) diag.Error {

	objectDn := ldapDnFromCnIDSAttribute(parentDn, name)
	err := conn.Delete(objectDn, ctxt)
	if err != nil {
		if !ldap.IsNoSuchObjectError(err) {
			return err
		}
	}

	return nil
}
func ldapDeleteIDSAttributeMap(conn ldap.Connection, parentDn string, ctxt diag.RequestContext) diag.Error {
	cdn := ldapContainerDnIDSAttribute(parentDn)
	return ldap.DeleteSubtree(conn, cdn, (cdn != parentDn), ctxt)
}



func ldapGetIDSAttributeMap(conn ldap.Connection, parentDn string, ctxt diag.RequestContext) (types.IDSAttributeMap, diag.Error) {
	var err diag.Error
	cdn := ldapContainerDnIDSAttribute(parentDn)
	attrs := ldapAttrNamesIDSAttribute()

	msg, err := conn.Search(
		cdn, ldap.ScopeOneLevel, "(objectClass=lightwaveSTSIDSAttribute)",
		attrs, false, 0, 0, ctxt)
	if err != nil {
		return nil, err
	}
	defer msg.Close()
	builder := types.NewIDSAttributeMapBuilder()

	err = msg.IterateEntries(func(e ldap.Entry, ctxt diag.RequestContext) diag.Error {

		b, err := ldapFromEntryIDSAttribute(e, ctxt)
		if err != nil {
			return err
		}

		resv, err := b.Build()
		if err != nil {
			return err
		}
		builder.Add(resv)
		return nil
	}, ctxt)

	if err != nil {
		return nil, err
	}
	return builder.Build()
}
func ldapDnFromObjectIDSConfig(parentDn string, obj types.IDSConfig) string {
	return "cn=" + obj.Name()+ "," + ldapContainerDnIDSConfig(parentDn)
}

func ldapDnFromCnIDSConfig(parentDn string, name string) string {
	return "cn=" +name + "," + ldapContainerDnIDSConfig(parentDn)
}

func ldapContainerDnIDSConfig(parentDn string) string {
	return "cn=IdentityProviders," + parentDn
}

func ldapModsIDSConfig(obj types.IDSConfig, enc transformer) ([]ldap.AttributeMod, diag.Error) {

	attrMods := make([]ldap.AttributeMod, 0, 11)
	var modType ldap.ModType
	var mod ldap.AttributeMod
	var ldapVal ldap.Value
	var err diag.Error
	modType = ldap.ModTypeReplace
	if len(obj.Domain()) <= 0 {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForString(obj.Domain())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSDomainName", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if len(obj.Alias()) <= 0 {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForString(obj.Alias())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSAlias", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if len(obj.Provider().String()) <= 0 {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForString(obj.Provider().String())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSProviderType", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if len(obj.AuthType().String()) <= 0 {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForString(obj.AuthType().String())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSAuthenticationType", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if obj.Addresses() == nil {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForUrlsPtr(obj.Addresses())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSConnectionStrings", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if obj.Certificates() == nil {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForCertsPtr(obj.Certificates())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "userCertificate", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if len(obj.UserName()) <= 0 {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForString(obj.UserName())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSUserName", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if len(obj.Pwd()) <= 0 {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForStrings(obj.Pwd())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		} else {
			ldapVal = transformedValue(ldapVal, enc)
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSPassword", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if len(obj.UserBaseDN()) <= 0 {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForString(obj.UserBaseDN())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSUserBaseDN", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if len(obj.GroupBaseDN()) <= 0 {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForString(obj.GroupBaseDN())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSGroupBaseDN", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if len(obj.LoginMethods().Strings()) <= 0 {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}
	

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForStrings(obj.LoginMethods().Strings())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSAuthnTypes", ldapVal)
	attrMods = append(attrMods, mod)

	return attrMods, nil
}
func ldapAttrsIDSConfig(obj types.IDSConfig, enc transformer) ([]ldap.Attribute, diag.Error) {

	attrs := make([]ldap.Attribute, 0, 12 + 1)
	var attr ldap.Attribute
	var ldapVal ldap.Value
	var err diag.Error

	// objectClass
	ldapVal, err = ldap.ValueForString("lightwaveSTSIdentityStore")
	if err != nil {
		return []ldap.Attribute{}, err
	}
	attr = ldap.NewAttribute("objectClass", ldapVal)
	attrs = append(attrs, attr)
	ldapVal, err = ldap.ValueForString(obj.Name())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("cn", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForString(obj.Domain())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSDomainName", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForString(obj.Alias())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSAlias", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForString(obj.Provider().String())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSProviderType", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForString(obj.AuthType().String())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSAuthenticationType", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForUrlsPtr(obj.Addresses())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSConnectionStrings", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForCertsPtr(obj.Certificates())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("userCertificate", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForString(obj.UserName())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSUserName", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForStrings(obj.Pwd())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {
		ldapVal = transformedValue(ldapVal, enc)

		attr = ldap.NewAttribute("lightwaveSTSPassword", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForString(obj.UserBaseDN())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSUserBaseDN", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForString(obj.GroupBaseDN())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSGroupBaseDN", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForStrings(obj.LoginMethods().Strings())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSAuthnTypes", ldapVal)
		attrs = append(attrs, attr)
	}

	return attrs, nil
}

func ldapAttrNamesIDSConfig() []string {
	return ldapAttrNamesIDSConfigConst
}

var(
	ldapAttrNamesIDSConfigConst = []string{
		"cn",
		"lightwaveSTSDomainName",
		"lightwaveSTSAlias",
		"lightwaveSTSProviderType",
		"lightwaveSTSAuthenticationType",
		"lightwaveSTSConnectionStrings",
		"userCertificate",
		"lightwaveSTSUserName",
		"lightwaveSTSPassword",
		"lightwaveSTSUserBaseDN",
		"lightwaveSTSGroupBaseDN",
		"lightwaveSTSAuthnTypes",
	}
)

func ldapFromEntryIDSConfig(e ldap.Entry, dec transformer, ctxt diag.RequestContext) (types.IDSConfigBuilder,diag.Error) {
	builder := types.NewIDSConfigBuilder()
	var err diag.Error
	var v ldap.Value
	v, err = ldap.GetAttributeValue(e, "cn", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi0, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		builder.Name(vi0)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSDomainName", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi1, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		builder.Domain(vi1)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSAlias", false, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi2, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		builder.Alias(vi2)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSProviderType", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		var v3 types.ProviderType
		vi3, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		err = v3.From(vi3)
		if err != nil {
			return nil, err
		}
		builder.Provider(v3)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSAuthenticationType", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		var v4 types.AuthType
		vi4, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		err = v4.From(vi4)
		if err != nil {
			return nil, err
		}
		builder.AuthType(v4)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSConnectionStrings", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi5, err := ldap.UrlsPtrForValue(v)
		if err != nil {
			return nil, err
		}
		builder.Addresses(vi5)
	}
	v, err = ldap.GetAttributeValue(e, "userCertificate", false, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi6, err := ldap.CertsPtrForValue(v)
		if err != nil {
			return nil, err
		}
		builder.Certificates(vi6)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSUserName", false, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi7, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		builder.UserName(vi7)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSPassword", false, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		v = transformedValue(v, dec)
		vi8, err := ldap.StringsForValue(v)
		if err != nil {
			return nil, err
		}
		builder.Pwd(vi8)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSUserBaseDN", false, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi9, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		builder.UserBaseDN(vi9)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSGroupBaseDN", false, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi10, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		builder.GroupBaseDN(vi10)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSAuthnTypes", false, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		var v11 types.LoginMethodSet
		vi11, err := ldap.StringsForValue(v)
		if err != nil {
			return nil, err
		}
		err = v11.From(vi11)
		if err != nil {
			return nil, err
		}
		builder.LoginMethods(v11)
	}

	return builder, nil
}

func ldapCreateIDSConfig(conn ldap.Connection, parentDn string, obj types.IDSConfig,enc transformer, ctxt diag.RequestContext) diag.Error {
	err := EnsureContainer(conn, parentDn, "IdentityProviders", ctxt)
	if err != nil {
		return err
	}
	objectDn := ldapDnFromObjectIDSConfig(parentDn, obj)
	attributes, err := ldapAttrsIDSConfig(obj, enc)
	if err != nil {
		return err
	}

	err = conn.Add(objectDn, attributes, ctxt)
	if err != nil {
		return err
	}
	err = ldapCreateIDSAttributeMap(conn, objectDn, obj.Attributes(), ctxt)
	
	if err != nil {
		return err
	}

	return nil
}

func ldapUpdateIDSConfig(conn ldap.Connection, parentDn string, obj types.IDSConfig,enc transformer, ctxt diag.RequestContext) diag.Error {

	objectDn := ldapDnFromObjectIDSConfig(parentDn, obj)
	attrMods, err := ldapModsIDSConfig(obj, enc)
	if err != nil {
		return err
	}

	err = conn.Modify(objectDn, attrMods, ctxt)
	if err != nil {
		return err
	}
	err = ldapUpdateIDSAttributeMap(conn, objectDn, obj.Attributes(), ctxt)
	
	if err != nil {
		return err
	}
	return nil
}



func ldapDeleteIDSConfig(conn ldap.Connection, parentDn string, name string, ctxt diag.RequestContext) diag.Error {

	objectDn := ldapDnFromCnIDSConfig(parentDn, name)
	err:=ldap.DeleteSubtree(conn, objectDn, true, ctxt)
	if err != nil {
		if !ldap.IsNoSuchObjectError(err) {
			return err
		}
	}

	return nil
}

func ldapGetIDSConfig(conn ldap.Connection, parentDn string, name string, dec transformer, ctxt diag.RequestContext) (types.IDSConfig, diag.Error) {

	var err diag.Error
	objectDn := ldapDnFromCnIDSConfig(parentDn, name)
	attrs := ldapAttrNamesIDSConfig()

	// go-ldap does not allow for empty filter, check on this....
	msg, err := conn.Search(objectDn, ldap.ScopeBase, "(objectClass=*)", attrs, false, 0, 0, ctxt)
	if err != nil {
		return nil, err
	}
	defer msg.Close()

	len, err := msg.Len(ctxt)
	if err != nil {
		return nil, err
	}

	if len != 1 {
		// todo: return error
		//return nil, err
	}

	var b types.IDSConfigBuilder

	err = msg.IterateEntries(func(e ldap.Entry, ctxt diag.RequestContext) diag.Error {
		b, err = ldapFromEntryIDSConfig(e, dec, ctxt)
		if err != nil {
			return err
		}
		return nil
	}, ctxt)

	if err != nil {
		return nil, err
	}
	v0, err := ldapGetIDSAttributeMap(conn, objectDn, ctxt)
	
	if err != nil {
		return nil, err
	}
	b.Attributes(v0)

	return b.Build()
}


func ldapListIDSConfig(conn ldap.Connection, parentDn string,dec transformer, ctxt diag.RequestContext) ([]types.IDSConfig, diag.Error) {
	var err diag.Error
	cdn := ldapContainerDnIDSConfig(parentDn)
	attrs := ldapAttrNamesIDSConfig()

	msg, err := conn.Search(
		cdn, ldap.ScopeOneLevel, "(objectClass=lightwaveSTSIdentityStore)",
		attrs, false, 0, 0, ctxt)
	if err != nil {
		return []types.IDSConfig{}, err
	}
	defer msg.Close()
	num, err := msg.Len(ctxt)
	if err != nil {
		return []types.IDSConfig{}, err
	}
	res := make([]types.IDSConfig, 0, num)

	err = msg.IterateEntries(func(e ldap.Entry, ctxt diag.RequestContext) diag.Error {

		b, err := ldapFromEntryIDSConfig(e, dec, ctxt)
		if err != nil {
			return err
		}
		dn, err := e.Dn(ctxt)
		if err != nil {
			return err
		}
		v0, err := ldapGetIDSAttributeMap(conn, dn, ctxt)
		
		if err != nil {
			return err
		}
		b.Attributes(v0)

		resv, err := b.Build()
		if err != nil {
			return err
		}
		res = append(res, resv)
		return nil
	}, ctxt)

	if err != nil {
		return []types.IDSConfig{}, err
	}
	return res, nil
}
func ldapDnFromObjectOidcClient(parentDn string, obj types.OidcClient) string {
	return "cn=" + obj.ID()+ "," + ldapContainerDnOidcClient(parentDn)
}

func ldapDnFromCnOidcClient(parentDn string, name string) string {
	return "cn=" +name + "," + ldapContainerDnOidcClient(parentDn)
}

func ldapContainerDnOidcClient(parentDn string) string {
	return "cn=OidcClients," + parentDn
}

func ldapModsOidcClient(obj types.OidcClient) ([]ldap.AttributeMod, diag.Error) {

	attrMods := make([]ldap.AttributeMod, 0, 6)
	var modType ldap.ModType
	var mod ldap.AttributeMod
	var ldapVal ldap.Value
	var err diag.Error
	modType = ldap.ModTypeReplace
	if obj.RedirectURIs() == nil {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForUrlsPtr(obj.RedirectURIs())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSRedirectURIs", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if len(obj.AuthMethod().String()) <= 0 {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForString(obj.AuthMethod().String())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSOidcClientAuthMethod", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if obj.PostLogoutRedirectURIs() == nil {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForUrlsPtr(obj.PostLogoutRedirectURIs())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSPostLogoutRedirectURI", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if obj.LogoutURI() == nil {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForUrlPtr(obj.LogoutURI())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSLogoutURI", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForDuration(obj.AssertionLifetime())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSClientAssertionLifetimeMS", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForBool(obj.CrossTenant())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSCrossTenant", ldapVal)
	attrMods = append(attrMods, mod)

	return attrMods, nil
}
func ldapAttrsOidcClient(obj types.OidcClient) ([]ldap.Attribute, diag.Error) {

	attrs := make([]ldap.Attribute, 0, 7 + 1)
	var attr ldap.Attribute
	var ldapVal ldap.Value
	var err diag.Error

	// objectClass
	ldapVal, err = ldap.ValueForString("lightwaveSTSOidcClient")
	if err != nil {
		return []ldap.Attribute{}, err
	}
	attr = ldap.NewAttribute("objectClass", ldapVal)
	attrs = append(attrs, attr)
	ldapVal, err = ldap.ValueForString(obj.ID())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("cn", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForUrlsPtr(obj.RedirectURIs())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSRedirectURIs", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForString(obj.AuthMethod().String())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSOidcClientAuthMethod", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForUrlsPtr(obj.PostLogoutRedirectURIs())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSPostLogoutRedirectURI", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForUrlPtr(obj.LogoutURI())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSLogoutURI", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForDuration(obj.AssertionLifetime())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSClientAssertionLifetimeMS", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForBool(obj.CrossTenant())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSCrossTenant", ldapVal)
		attrs = append(attrs, attr)
	}

	return attrs, nil
}

func ldapAttrNamesOidcClient() []string {
	return ldapAttrNamesOidcClientConst
}

var(
	ldapAttrNamesOidcClientConst = []string{
		"cn",
		"lightwaveSTSRedirectURIs",
		"lightwaveSTSOidcClientAuthMethod",
		"lightwaveSTSPostLogoutRedirectURI",
		"lightwaveSTSLogoutURI",
		"lightwaveSTSClientAssertionLifetimeMS",
		"lightwaveSTSCrossTenant",
	}
)

func ldapFromEntryOidcClient(e ldap.Entry, ctxt diag.RequestContext) (types.OidcClientBuilder,diag.Error) {
	builder := types.NewOidcClientBuilder()
	var err diag.Error
	var v ldap.Value
	v, err = ldap.GetAttributeValue(e, "cn", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi0, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		builder.ID(vi0)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSRedirectURIs", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi1, err := ldap.UrlsPtrForValue(v)
		if err != nil {
			return nil, err
		}
		builder.RedirectURIs(vi1)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSOidcClientAuthMethod", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		var v2 types.OidcClientAuthMethod
		vi2, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		err = v2.From(vi2)
		if err != nil {
			return nil, err
		}
		builder.AuthMethod(v2)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSPostLogoutRedirectURI", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi3, err := ldap.UrlsPtrForValue(v)
		if err != nil {
			return nil, err
		}
		builder.PostLogoutRedirectURIs(vi3)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSLogoutURI", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi4, err := ldap.UrlPtrForValue(v)
		if err != nil {
			return nil, err
		}
		builder.LogoutURI(vi4)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSClientAssertionLifetimeMS", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi5, err := ldap.DurationForValue(v)
		if err != nil {
			return nil, err
		}
		builder.AssertionLifetime(vi5)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSCrossTenant", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi6, err := ldap.BoolForValue(v)
		if err != nil {
			return nil, err
		}
		builder.CrossTenant(vi6)
	}

	return builder, nil
}

func ldapCreateOidcClient(conn ldap.Connection, parentDn string, obj types.OidcClient, ctxt diag.RequestContext) diag.Error {
	err := EnsureContainer(conn, parentDn, "OidcClients", ctxt)
	if err != nil {
		return err
	}
	objectDn := ldapDnFromObjectOidcClient(parentDn, obj)
	attributes, err := ldapAttrsOidcClient(obj)
	if err != nil {
		return err
	}

	err = conn.Add(objectDn, attributes, ctxt)
	if err != nil {
		return err
	}

	return nil
}

func ldapUpdateOidcClient(conn ldap.Connection, parentDn string, obj types.OidcClient, ctxt diag.RequestContext) diag.Error {

	objectDn := ldapDnFromObjectOidcClient(parentDn, obj)
	attrMods, err := ldapModsOidcClient(obj)
	if err != nil {
		return err
	}

	err = conn.Modify(objectDn, attrMods, ctxt)
	if err != nil {
		return err
	}
	if err != nil {
		return err
	}
	return nil
}



func ldapDeleteOidcClient(conn ldap.Connection, parentDn string, name string, ctxt diag.RequestContext) diag.Error {

	objectDn := ldapDnFromCnOidcClient(parentDn, name)
	err := conn.Delete(objectDn, ctxt)
	if err != nil {
		if !ldap.IsNoSuchObjectError(err) {
			return err
		}
	}

	return nil
}

func ldapGetOidcClient(conn ldap.Connection, parentDn string, name string, ctxt diag.RequestContext) (types.OidcClient, diag.Error) {

	var err diag.Error
	objectDn := ldapDnFromCnOidcClient(parentDn, name)
	attrs := ldapAttrNamesOidcClient()

	// go-ldap does not allow for empty filter, check on this....
	msg, err := conn.Search(objectDn, ldap.ScopeBase, "(objectClass=*)", attrs, false, 0, 0, ctxt)
	if err != nil {
		return nil, err
	}
	defer msg.Close()

	len, err := msg.Len(ctxt)
	if err != nil {
		return nil, err
	}

	if len != 1 {
		// todo: return error
		//return nil, err
	}

	var b types.OidcClientBuilder

	err = msg.IterateEntries(func(e ldap.Entry, ctxt diag.RequestContext) diag.Error {
		b, err = ldapFromEntryOidcClient(e, ctxt)
		if err != nil {
			return err
		}
		return nil
	}, ctxt)

	if err != nil {
		return nil, err
	}

	return b.Build()
}


func ldapListOidcClient(conn ldap.Connection, parentDn string, ctxt diag.RequestContext) ([]types.OidcClient, diag.Error) {
	var err diag.Error
	cdn := ldapContainerDnOidcClient(parentDn)
	attrs := ldapAttrNamesOidcClient()

	msg, err := conn.Search(
		cdn, ldap.ScopeOneLevel, "(objectClass=lightwaveSTSOidcClient)",
		attrs, false, 0, 0, ctxt)
	if err != nil {
		return []types.OidcClient{}, err
	}
	defer msg.Close()
	num, err := msg.Len(ctxt)
	if err != nil {
		return []types.OidcClient{}, err
	}
	res := make([]types.OidcClient, 0, num)

	err = msg.IterateEntries(func(e ldap.Entry, ctxt diag.RequestContext) diag.Error {

		b, err := ldapFromEntryOidcClient(e, ctxt)
		if err != nil {
			return err
		}

		resv, err := b.Build()
		if err != nil {
			return err
		}
		res = append(res, resv)
		return nil
	}, ctxt)

	if err != nil {
		return []types.OidcClient{}, err
	}
	return res, nil
}

func ldapModsOidcClientMeta(obj types.OidcClientMeta) ([]ldap.AttributeMod, diag.Error) {

	attrMods := make([]ldap.AttributeMod, 0, 6)
	var modType ldap.ModType
	var mod ldap.AttributeMod
	var ldapVal ldap.Value
	var err diag.Error
	modType = ldap.ModTypeReplace
	if obj.RedirectURIs() == nil {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForUrlsPtr(obj.RedirectURIs())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSRedirectURIs", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if len(obj.AuthMethod().String()) <= 0 {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForString(obj.AuthMethod().String())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSOidcClientAuthMethod", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if obj.PostLogoutRedirectURIs() == nil {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForUrlsPtr(obj.PostLogoutRedirectURIs())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSPostLogoutRedirectURI", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if obj.LogoutURI() == nil {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForUrlPtr(obj.LogoutURI())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSLogoutURI", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForDuration(obj.AssertionLifetime())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSClientAssertionLifetimeMS", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForBool(obj.CrossTenant())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSCrossTenant", ldapVal)
	attrMods = append(attrMods, mod)

	return attrMods, nil
}
func ldapUpdateOidcClientMeta(conn ldap.Connection, parentDn string, name string, obj types.OidcClientMeta, ctxt diag.RequestContext) diag.Error {

	objectDn := ldapDnFromCnOidcClient(parentDn, name)
	attrMods, err := ldapModsOidcClientMeta(obj)
	if err != nil {
		return err
	}

	err = conn.Modify(objectDn, attrMods, ctxt)
	if err != nil {
		return err
	}

	return nil
}
func ldapDnFromObjectTenant(parentDn string, obj types.Tenant) string {
	return "cn=" + obj.Name().String()+ "," + ldapContainerDnTenant(parentDn)
}

func ldapDnFromCnTenant(parentDn string, name string) string {
	return "cn=" +name + "," + ldapContainerDnTenant(parentDn)
}

func ldapContainerDnTenant(parentDn string) string { return parentDn
}

func ldapModsTenant(obj types.Tenant) ([]ldap.AttributeMod, diag.Error) {

	attrMods := make([]ldap.AttributeMod, 0, 12)
	var modType ldap.ModType
	var mod ldap.AttributeMod
	var ldapVal ldap.Value
	var err diag.Error
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForPrivateKey(obj.SignerKey())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "privateKey", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if obj.SignerCert() == nil {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForCertPtr(obj.SignerCert())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "userCertificate", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if obj.SignerCerts() == nil {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForCertsPtr(obj.SignerCerts())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSSigners", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForDuration(obj.ClockTolerance())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSClockTolerance", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForDuration(obj.MaxBearerLifetime())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSMaxBearerTokenLifetime", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForDuration(obj.MaxHOKLifetime())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSMaxHOKTokenLifetime", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForDuration(obj.MaxBearerRefreshLifetime())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSMaxBearerRefreshTokenLifetime", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForDuration(obj.MaxHOKRefreshLifetime())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSMaxHOKRefreshTokenLifetime", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForDuration(obj.SessionLifetime())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSSessionLifetime", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForUint32(obj.DelegationCount())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSDelegationCount", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForUint32(obj.RenewCount())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSRenewCount", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace
	if len(obj.LoginMethods().Strings()) <= 0 {
		modType = ldap.ModTypeDelete
		ldapVal = nil
	}
	

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForStrings(obj.LoginMethods().Strings())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSAuthnTypes", ldapVal)
	attrMods = append(attrMods, mod)

	return attrMods, nil
}
func ldapAttrsTenant(obj types.Tenant) ([]ldap.Attribute, diag.Error) {

	attrs := make([]ldap.Attribute, 0, 14 + 1)
	var attr ldap.Attribute
	var ldapVal ldap.Value
	var err diag.Error

	// objectClass
	ldapVal, err = ldap.ValueForString("lightwaveSTSTenant")
	if err != nil {
		return []ldap.Attribute{}, err
	}
	attr = ldap.NewAttribute("objectClass", ldapVal)
	attrs = append(attrs, attr)
	ldapVal, err = ldap.ValueForString(obj.Name().String())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("cn", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForString(obj.Domain())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSDomainName", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForPrivateKey(obj.SignerKey())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("privateKey", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForCertPtr(obj.SignerCert())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("userCertificate", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForCertsPtr(obj.SignerCerts())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSSigners", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForDuration(obj.ClockTolerance())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSClockTolerance", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForDuration(obj.MaxBearerLifetime())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSMaxBearerTokenLifetime", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForDuration(obj.MaxHOKLifetime())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSMaxHOKTokenLifetime", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForDuration(obj.MaxBearerRefreshLifetime())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSMaxBearerRefreshTokenLifetime", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForDuration(obj.MaxHOKRefreshLifetime())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSMaxHOKRefreshTokenLifetime", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForDuration(obj.SessionLifetime())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSSessionLifetime", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForUint32(obj.DelegationCount())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSDelegationCount", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForUint32(obj.RenewCount())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSRenewCount", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForStrings(obj.LoginMethods().Strings())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSAuthnTypes", ldapVal)
		attrs = append(attrs, attr)
	}

	return attrs, nil
}

func ldapAttrNamesTenant() []string {
	return ldapAttrNamesTenantConst
}

var(
	ldapAttrNamesTenantConst = []string{
		"cn",
		"lightwaveSTSDomainName",
		"privateKey",
		"userCertificate",
		"lightwaveSTSSigners",
		"lightwaveSTSClockTolerance",
		"lightwaveSTSMaxBearerTokenLifetime",
		"lightwaveSTSMaxHOKTokenLifetime",
		"lightwaveSTSMaxBearerRefreshTokenLifetime",
		"lightwaveSTSMaxHOKRefreshTokenLifetime",
		"lightwaveSTSSessionLifetime",
		"lightwaveSTSDelegationCount",
		"lightwaveSTSRenewCount",
		"lightwaveSTSAuthnTypes",
	}
)

func ldapFromEntryTenant(e ldap.Entry, ctxt diag.RequestContext) (types.TenantBuilder,diag.Error) {
	builder := types.NewTenantBuilder()
	var err diag.Error
	var v ldap.Value
	v, err = ldap.GetAttributeValue(e, "cn", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		var v0 diag.TenantID
		vi0, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		err = v0.From(vi0)
		if err != nil {
			return nil, err
		}
		builder.Name(v0)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSDomainName", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi1, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		builder.Domain(vi1)
	}
	v, err = ldap.GetAttributeValue(e, "privateKey", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi2, err := ldap.PrivateKeyForValue(v)
		if err != nil {
			return nil, err
		}
		builder.SignerKey(vi2)
	}
	v, err = ldap.GetAttributeValue(e, "userCertificate", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi3, err := ldap.CertPtrForValue(v)
		if err != nil {
			return nil, err
		}
		builder.SignerCert(vi3)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSSigners", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi4, err := ldap.CertsPtrForValue(v)
		if err != nil {
			return nil, err
		}
		builder.SignerCerts(vi4)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSClockTolerance", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi5, err := ldap.DurationForValue(v)
		if err != nil {
			return nil, err
		}
		builder.ClockTolerance(vi5)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSMaxBearerTokenLifetime", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi6, err := ldap.DurationForValue(v)
		if err != nil {
			return nil, err
		}
		builder.MaxBearerLifetime(vi6)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSMaxHOKTokenLifetime", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi7, err := ldap.DurationForValue(v)
		if err != nil {
			return nil, err
		}
		builder.MaxHOKLifetime(vi7)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSMaxBearerRefreshTokenLifetime", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi8, err := ldap.DurationForValue(v)
		if err != nil {
			return nil, err
		}
		builder.MaxBearerRefreshLifetime(vi8)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSMaxHOKRefreshTokenLifetime", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi9, err := ldap.DurationForValue(v)
		if err != nil {
			return nil, err
		}
		builder.MaxHOKRefreshLifetime(vi9)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSSessionLifetime", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi10, err := ldap.DurationForValue(v)
		if err != nil {
			return nil, err
		}
		builder.SessionLifetime(vi10)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSDelegationCount", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi11, err := ldap.Uint32ForValue(v)
		if err != nil {
			return nil, err
		}
		builder.DelegationCount(vi11)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSRenewCount", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi12, err := ldap.Uint32ForValue(v)
		if err != nil {
			return nil, err
		}
		builder.RenewCount(vi12)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSAuthnTypes", false, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		var v13 types.LoginMethodSet
		vi13, err := ldap.StringsForValue(v)
		if err != nil {
			return nil, err
		}
		err = v13.From(vi13)
		if err != nil {
			return nil, err
		}
		builder.LoginMethods(v13)
	}

	return builder, nil
}

func ldapCreateTenant(conn ldap.Connection, parentDn string, obj types.Tenant, ctxt diag.RequestContext) diag.Error {
	objectDn := ldapDnFromObjectTenant(parentDn, obj)
	attributes, err := ldapAttrsTenant(obj)
	if err != nil {
		return err
	}

	err = conn.Add(objectDn, attributes, ctxt)
	if err != nil {
		return err
	}

	return nil
}

func ldapUpdateTenant(conn ldap.Connection, parentDn string, obj types.Tenant, ctxt diag.RequestContext) diag.Error {

	objectDn := ldapDnFromObjectTenant(parentDn, obj)
	attrMods, err := ldapModsTenant(obj)
	if err != nil {
		return err
	}

	err = conn.Modify(objectDn, attrMods, ctxt)
	if err != nil {
		return err
	}
	if err != nil {
		return err
	}
	return nil
}



func ldapDeleteTenant(conn ldap.Connection, parentDn string, name string, ctxt diag.RequestContext) diag.Error {

	objectDn := ldapDnFromCnTenant(parentDn, name)
	err := conn.Delete(objectDn, ctxt)
	if err != nil {
		if !ldap.IsNoSuchObjectError(err) {
			return err
		}
	}

	return nil
}

func ldapGetTenant(conn ldap.Connection, parentDn string, name string, ctxt diag.RequestContext) (types.Tenant, diag.Error) {

	var err diag.Error
	objectDn := ldapDnFromCnTenant(parentDn, name)
	attrs := ldapAttrNamesTenant()

	// go-ldap does not allow for empty filter, check on this....
	msg, err := conn.Search(objectDn, ldap.ScopeBase, "(objectClass=*)", attrs, false, 0, 0, ctxt)
	if err != nil {
		return nil, err
	}
	defer msg.Close()

	len, err := msg.Len(ctxt)
	if err != nil {
		return nil, err
	}

	if len != 1 {
		// todo: return error
		//return nil, err
	}

	var b types.TenantBuilder

	err = msg.IterateEntries(func(e ldap.Entry, ctxt diag.RequestContext) diag.Error {
		b, err = ldapFromEntryTenant(e, ctxt)
		if err != nil {
			return err
		}
		return nil
	}, ctxt)

	if err != nil {
		return nil, err
	}

	return b.Build()
}


func ldapListTenant(conn ldap.Connection, parentDn string, ctxt diag.RequestContext) ([]types.Tenant, diag.Error) {
	var err diag.Error
	cdn := ldapContainerDnTenant(parentDn)
	attrs := ldapAttrNamesTenant()

	msg, err := conn.Search(
		cdn, ldap.ScopeOneLevel, "(objectClass=lightwaveSTSTenant)",
		attrs, false, 0, 0, ctxt)
	if err != nil {
		return []types.Tenant{}, err
	}
	defer msg.Close()
	num, err := msg.Len(ctxt)
	if err != nil {
		return []types.Tenant{}, err
	}
	res := make([]types.Tenant, 0, num)

	err = msg.IterateEntries(func(e ldap.Entry, ctxt diag.RequestContext) diag.Error {

		b, err := ldapFromEntryTenant(e, ctxt)
		if err != nil {
			return err
		}

		resv, err := b.Build()
		if err != nil {
			return err
		}
		res = append(res, resv)
		return nil
	}, ctxt)

	if err != nil {
		return []types.Tenant{}, err
	}
	return res, nil
}

func ldapModsTokenPolicy(obj types.TokenPolicy) ([]ldap.AttributeMod, diag.Error) {

	attrMods := make([]ldap.AttributeMod, 0, 8)
	var modType ldap.ModType
	var mod ldap.AttributeMod
	var ldapVal ldap.Value
	var err diag.Error
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForDuration(obj.ClockTolerance())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSClockTolerance", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForDuration(obj.MaxBearerLifetime())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSMaxBearerTokenLifetime", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForDuration(obj.MaxHOKLifetime())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSMaxHOKTokenLifetime", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForDuration(obj.MaxBearerRefreshLifetime())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSMaxBearerRefreshTokenLifetime", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForDuration(obj.MaxHOKRefreshLifetime())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSMaxHOKRefreshTokenLifetime", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForDuration(obj.SessionLifetime())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSSessionLifetime", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForUint32(obj.DelegationCount())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSDelegationCount", ldapVal)
	attrMods = append(attrMods, mod)
	modType = ldap.ModTypeReplace

	if modType == ldap.ModTypeReplace{
		ldapVal, err = ldap.ValueForUint32(obj.RenewCount())
		if err != nil {
			return []ldap.AttributeMod{}, err
		}
		if ldapVal.Len() <= 0 {
			ldapVal = nil
			modType = ldap.ModTypeDelete
		}
	}
	mod = ldap.NewAttributeMod(modType, "lightwaveSTSRenewCount", ldapVal)
	attrMods = append(attrMods, mod)

	return attrMods, nil
}
func ldapUpdateTokenPolicy(conn ldap.Connection, parentDn string, name string, obj types.TokenPolicy, ctxt diag.RequestContext) diag.Error {

	objectDn := ldapDnFromCnTenant(parentDn, name)
	attrMods, err := ldapModsTokenPolicy(obj)
	if err != nil {
		return err
	}

	err = conn.Modify(objectDn, attrMods, ctxt)
	if err != nil {
		return err
	}

	return nil
}
func ldapDnFromObjecttenantRef(parentDn string, obj tenantRef) string {
	return "cn=" + obj.Name().String()+ "," + ldapContainerDntenantRef(parentDn)
}

func ldapDnFromCntenantRef(parentDn string, name string) string {
	return "cn=" +name + "," + ldapContainerDntenantRef(parentDn)
}

func ldapContainerDntenantRef(parentDn string) string {
	return "cn=Tenants," + parentDn
}

func ldapModstenantRef(obj tenantRef) ([]ldap.AttributeMod, diag.Error) {

	attrMods := make([]ldap.AttributeMod, 0, 0)

	return attrMods, nil
}
func ldapAttrstenantRef(obj tenantRef) ([]ldap.Attribute, diag.Error) {

	attrs := make([]ldap.Attribute, 0, 3 + 1)
	var attr ldap.Attribute
	var ldapVal ldap.Value
	var err diag.Error

	// objectClass
	ldapVal, err = ldap.ValueForString("lightwaveSTSTenantReference")
	if err != nil {
		return []ldap.Attribute{}, err
	}
	attr = ldap.NewAttribute("objectClass", ldapVal)
	attrs = append(attrs, attr)
	ldapVal, err = ldap.ValueForString(obj.Name().String())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("cn", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForString(obj.DomainDn())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("aliasedObjectName", ldapVal)
		attrs = append(attrs, attr)
	}
	ldapVal, err = ldap.ValueForString(obj.Key())
	if err != nil {
		return []ldap.Attribute{}, err
	}
	if ldapVal.Len() > 0 {

		attr = ldap.NewAttribute("lightwaveSTSTenantKey", ldapVal)
		attrs = append(attrs, attr)
	}

	return attrs, nil
}

func ldapAttrNamestenantRef() []string {
	return ldapAttrNamestenantRefConst
}

var(
	ldapAttrNamestenantRefConst = []string{
		"cn",
		"aliasedObjectName",
		"lightwaveSTSTenantKey",
	}
)

func ldapFromEntrytenantRef(e ldap.Entry, ctxt diag.RequestContext) (tenantRefBuilder,diag.Error) {
	builder := newtenantRefBuilder()
	var err diag.Error
	var v ldap.Value
	v, err = ldap.GetAttributeValue(e, "cn", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		var v0 diag.TenantID
		vi0, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		err = v0.From(vi0)
		if err != nil {
			return nil, err
		}
		builder.Name(v0)
	}
	v, err = ldap.GetAttributeValue(e, "aliasedObjectName", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi1, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		builder.DomainDn(vi1)
	}
	v, err = ldap.GetAttributeValue(e, "lightwaveSTSTenantKey", true, ctxt)
	if err != nil {
		return nil, err
	}

	if v != nil {
		vi2, err := ldap.StringForValue(v)
		if err != nil {
			return nil, err
		}
		builder.Key(vi2)
	}

	return builder, nil
}

func ldapCreatetenantRef(conn ldap.Connection, parentDn string, obj tenantRef, ctxt diag.RequestContext) diag.Error {
	err := EnsureContainer(conn, parentDn, "Tenants", ctxt)
	if err != nil {
		return err
	}
	objectDn := ldapDnFromObjecttenantRef(parentDn, obj)
	attributes, err := ldapAttrstenantRef(obj)
	if err != nil {
		return err
	}

	err = conn.Add(objectDn, attributes, ctxt)
	if err != nil {
		return err
	}

	return nil
}

func ldapUpdatetenantRef(conn ldap.Connection, parentDn string, obj tenantRef, ctxt diag.RequestContext) diag.Error {

	objectDn := ldapDnFromObjecttenantRef(parentDn, obj)
	attrMods, err := ldapModstenantRef(obj)
	if err != nil {
		return err
	}

	err = conn.Modify(objectDn, attrMods, ctxt)
	if err != nil {
		return err
	}
	if err != nil {
		return err
	}
	return nil
}



func ldapDeletetenantRef(conn ldap.Connection, parentDn string, name string, ctxt diag.RequestContext) diag.Error {

	objectDn := ldapDnFromCntenantRef(parentDn, name)
	err := conn.Delete(objectDn, ctxt)
	if err != nil {
		if !ldap.IsNoSuchObjectError(err) {
			return err
		}
	}

	return nil
}

func ldapGettenantRef(conn ldap.Connection, parentDn string, name string, ctxt diag.RequestContext) (tenantRef, diag.Error) {

	var err diag.Error
	objectDn := ldapDnFromCntenantRef(parentDn, name)
	attrs := ldapAttrNamestenantRef()

	// go-ldap does not allow for empty filter, check on this....
	msg, err := conn.Search(objectDn, ldap.ScopeBase, "(objectClass=*)", attrs, false, 0, 0, ctxt)
	if err != nil {
		return nil, err
	}
	defer msg.Close()

	len, err := msg.Len(ctxt)
	if err != nil {
		return nil, err
	}

	if len != 1 {
		// todo: return error
		//return nil, err
	}

	var b tenantRefBuilder

	err = msg.IterateEntries(func(e ldap.Entry, ctxt diag.RequestContext) diag.Error {
		b, err = ldapFromEntrytenantRef(e, ctxt)
		if err != nil {
			return err
		}
		return nil
	}, ctxt)

	if err != nil {
		return nil, err
	}

	return b.Build()
}


func ldapListtenantRef(conn ldap.Connection, parentDn string, ctxt diag.RequestContext) ([]tenantRef, diag.Error) {
	var err diag.Error
	cdn := ldapContainerDntenantRef(parentDn)
	attrs := ldapAttrNamestenantRef()

	msg, err := conn.Search(
		cdn, ldap.ScopeOneLevel, "(objectClass=lightwaveSTSTenantReference)",
		attrs, false, 0, 0, ctxt)
	if err != nil {
		return []tenantRef{}, err
	}
	defer msg.Close()
	num, err := msg.Len(ctxt)
	if err != nil {
		return []tenantRef{}, err
	}
	res := make([]tenantRef, 0, num)

	err = msg.IterateEntries(func(e ldap.Entry, ctxt diag.RequestContext) diag.Error {

		b, err := ldapFromEntrytenantRef(e, ctxt)
		if err != nil {
			return err
		}

		resv, err := b.Build()
		if err != nil {
			return err
		}
		res = append(res, resv)
		return nil
	}, ctxt)

	if err != nil {
		return []tenantRef{}, err
	}
	return res, nil
}