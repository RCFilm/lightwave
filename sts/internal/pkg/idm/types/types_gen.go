// Code generated by idm_gen. DO NOT EDIT.

package types

import(
	"fmt"
	"math/bits"
	"github.com/vmware/lightwave/sts/internal/pkg/diag"
)

var(
	exists = struct{}{}
)

const (
	LoginMethodNone LoginMethod = iota + 1
	LoginMethodPassword
)

func (e LoginMethod) String() string {
	switch e {
		case LoginMethodNone : return valLoginMethodNone
		case LoginMethodPassword : return valLoginMethodPassword
	}
	return ""
}

func (e LoginMethod) Known() bool {
	switch e {
		case LoginMethodNone : return true
		case LoginMethodPassword : return true
	}
	return false
}

func (e *LoginMethod) From(s string) diag.Error {
	if e == nil {
		return diag.MakeError(IdmErrorGeneric, "Unable to unmarshal 'LoginMethod' into nil", nil)
	}
	
	switch s {
		case valLoginMethodNone : *e = LoginMethodNone
		case valLoginMethodPassword : *e = LoginMethodPassword
		default : return diag.MakeError(IdmErrorInvalidArgument, fmt.Sprintf("Unexpected value of LoginMethod: '%s'", s), nil )
	}
	return nil
}

const(
	valLoginMethodNone = "none"
	valLoginMethodPassword = "password"
)

type LoginMethodSet uint8

func (s LoginMethodSet) Len() int {
	return bits.OnesCount8(uint8(s))
}

func (s LoginMethodSet) Contains(v LoginMethod) bool {
	return (uint8(s)&(0x1<<v) == uint8(0x1<<v))
}

type LoginMethodSetIteratorFunc func(v LoginMethod) diag.Error

func (s LoginMethodSet) Iterate(f LoginMethodSetIteratorFunc) diag.Error {
	var err diag.Error
	if s.Contains(LoginMethodNone) {
		err = f(LoginMethodNone)
		if err != nil {
			return err
		}
	}
	if s.Contains(LoginMethodPassword) {
		err = f(LoginMethodPassword)
		if err != nil {
			return err
		}
	}
	return nil
}

func (s *LoginMethodSet) Add(v LoginMethod) {
	*s=*s|(0x1<<v)
}

func (s LoginMethodSet) Strings() []string {
	res := make([]string, 0, s.Len())
	s.Iterate(func(v LoginMethod) diag.Error {
		res = append(res, v.String())
		return nil
	})
	return res
}

func (s *LoginMethodSet) From(input []string) diag.Error {
	if s == nil {
		return diag.MakeError(IdmErrorGeneric, "Unable to unmarshal 'LoginMethodSet' into nil", nil)
	}
	for _, v := range input{
		var e LoginMethod
		if err := e.From(v); err != nil {
			return err
		}
		s.Add(e)
	}
	return nil
}


const (
	OidcClientAuthMethodNone OidcClientAuthMethod = iota + 1
)

func (e OidcClientAuthMethod) String() string {
	switch e {
		case OidcClientAuthMethodNone : return valOidcClientAuthMethodNone
	}
	return ""
}

func (e OidcClientAuthMethod) Known() bool {
	switch e {
		case OidcClientAuthMethodNone : return true
	}
	return false
}

func (e *OidcClientAuthMethod) From(s string) diag.Error {
	if e == nil {
		return diag.MakeError(IdmErrorGeneric, "Unable to unmarshal 'OidcClientAuthMethod' into nil", nil)
	}
	
	switch s {
		case valOidcClientAuthMethodNone : *e = OidcClientAuthMethodNone
		default : return diag.MakeError(IdmErrorInvalidArgument, fmt.Sprintf("Unexpected value of OidcClientAuthMethod: '%s'", s), nil )
	}
	return nil
}

const(
	valOidcClientAuthMethodNone = "none"
)



const (
	IDSAttributeTypeConstant IDSAttributeType = iota + 1
	IDSAttributeTypeLdapAttribute
	IDSAttributeTypeAttribute
)

func (e IDSAttributeType) String() string {
	switch e {
		case IDSAttributeTypeConstant : return valIDSAttributeTypeConstant
		case IDSAttributeTypeLdapAttribute : return valIDSAttributeTypeLdapAttribute
		case IDSAttributeTypeAttribute : return valIDSAttributeTypeAttribute
	}
	return ""
}

func (e IDSAttributeType) Known() bool {
	switch e {
		case IDSAttributeTypeConstant : return true
		case IDSAttributeTypeLdapAttribute : return true
		case IDSAttributeTypeAttribute : return true
	}
	return false
}

func (e *IDSAttributeType) From(s string) diag.Error {
	if e == nil {
		return diag.MakeError(IdmErrorGeneric, "Unable to unmarshal 'IDSAttributeType' into nil", nil)
	}
	
	switch s {
		case valIDSAttributeTypeConstant : *e = IDSAttributeTypeConstant
		case valIDSAttributeTypeLdapAttribute : *e = IDSAttributeTypeLdapAttribute
		case valIDSAttributeTypeAttribute : *e = IDSAttributeTypeAttribute
		default : return diag.MakeError(IdmErrorInvalidArgument, fmt.Sprintf("Unexpected value of IDSAttributeType: '%s'", s), nil )
	}
	return nil
}

const(
	valIDSAttributeTypeConstant = "constant"
	valIDSAttributeTypeLdapAttribute = "ldap_attribute"
	valIDSAttributeTypeAttribute = "attribute"
)



const (
	AuthTypeNone AuthType = iota + 1
	AuthTypeSimple
	AuthTypeSrp
	AuthTypeStsAccount
)

func (e AuthType) String() string {
	switch e {
		case AuthTypeNone : return valAuthTypeNone
		case AuthTypeSimple : return valAuthTypeSimple
		case AuthTypeSrp : return valAuthTypeSrp
		case AuthTypeStsAccount : return valAuthTypeStsAccount
	}
	return ""
}

func (e AuthType) Known() bool {
	switch e {
		case AuthTypeNone : return true
		case AuthTypeSimple : return true
		case AuthTypeSrp : return true
		case AuthTypeStsAccount : return true
	}
	return false
}

func (e *AuthType) From(s string) diag.Error {
	if e == nil {
		return diag.MakeError(IdmErrorGeneric, "Unable to unmarshal 'AuthType' into nil", nil)
	}
	
	switch s {
		case valAuthTypeNone : *e = AuthTypeNone
		case valAuthTypeSimple : *e = AuthTypeSimple
		case valAuthTypeSrp : *e = AuthTypeSrp
		case valAuthTypeStsAccount : *e = AuthTypeStsAccount
		default : return diag.MakeError(IdmErrorInvalidArgument, fmt.Sprintf("Unexpected value of AuthType: '%s'", s), nil )
	}
	return nil
}

const(
	valAuthTypeNone = "none"
	valAuthTypeSimple = "simple"
	valAuthTypeSrp = "srp"
	valAuthTypeStsAccount = "sts_account"
)



const (
	AttributeIDUserIdentity AttributeID = "user_identity"
	AttributeIDFirstName AttributeID = "first_name"
	AttributeIDLastName AttributeID = "last_name"
	AttributeIDGroupIdentities AttributeID = "group_identities"
)

func (e AttributeID) String() string {
	return string(e)
}

func (e AttributeID) Known() bool {
	switch e {
		case AttributeIDUserIdentity : return true
		case AttributeIDFirstName : return true
		case AttributeIDLastName : return true
		case AttributeIDGroupIdentities : return true
	}
	return false
}

func (e *AttributeID) From(s string) diag.Error {
	if e == nil {
		return diag.MakeError(IdmErrorGeneric, "Unable to unmarshal 'AttributeID' into nil", nil)
	}
	*e = AttributeID(s)
	return nil
}





const (
	ProviderTypeVmdir ProviderType = iota + 1
	ProviderTypeNativeAd
	ProviderTypeOpenLdap
	ProviderTypeAdOverLdap
)

func (e ProviderType) String() string {
	switch e {
		case ProviderTypeVmdir : return valProviderTypeVmdir
		case ProviderTypeNativeAd : return valProviderTypeNativeAd
		case ProviderTypeOpenLdap : return valProviderTypeOpenLdap
		case ProviderTypeAdOverLdap : return valProviderTypeAdOverLdap
	}
	return ""
}

func (e ProviderType) Known() bool {
	switch e {
		case ProviderTypeVmdir : return true
		case ProviderTypeNativeAd : return true
		case ProviderTypeOpenLdap : return true
		case ProviderTypeAdOverLdap : return true
	}
	return false
}

func (e *ProviderType) From(s string) diag.Error {
	if e == nil {
		return diag.MakeError(IdmErrorGeneric, "Unable to unmarshal 'ProviderType' into nil", nil)
	}
	
	switch s {
		case valProviderTypeVmdir : *e = ProviderTypeVmdir
		case valProviderTypeNativeAd : *e = ProviderTypeNativeAd
		case valProviderTypeOpenLdap : *e = ProviderTypeOpenLdap
		case valProviderTypeAdOverLdap : *e = ProviderTypeAdOverLdap
		default : return diag.MakeError(IdmErrorInvalidArgument, fmt.Sprintf("Unexpected value of ProviderType: '%s'", s), nil )
	}
	return nil
}

const(
	valProviderTypeVmdir = "vmdir"
	valProviderTypeNativeAd = "native_ad"
	valProviderTypeOpenLdap = "open_ldap"
	valProviderTypeAdOverLdap = "ad_over_ldap"
)


