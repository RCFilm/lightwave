// Code generated by oidc_gen. DO NOT EDIT.

package protocol

import(
	"fmt"
	"math/bits"
	"strings"
	"github.com/vmware/lightwave/sts/internal/pkg/diag"
)

var(
	exists = struct{}{}
)

const (
	ResponseTypeNone ResponseType = iota + 1
	ResponseTypeCode
	ResponseTypeToken
	ResponseTypeIdToken
)

func (e ResponseType) String() string {
	switch e {
		case ResponseTypeNone : return valResponseTypeNone
		case ResponseTypeCode : return valResponseTypeCode
		case ResponseTypeToken : return valResponseTypeToken
		case ResponseTypeIdToken : return valResponseTypeIdToken
	}
	return ""
}

func (e ResponseType) Known() bool {
	switch e {
		case ResponseTypeNone : return true
		case ResponseTypeCode : return true
		case ResponseTypeToken : return true
		case ResponseTypeIdToken : return true
	}
	return false
}

func (e *ResponseType) From(s string) diag.Error {
	if e == nil {
		return diag.MakeError(OidcErrorServerError, "Unable to unmarshal 'ResponseType' into nil", nil)
	}
	
	switch s {
		case valResponseTypeNone : *e = ResponseTypeNone
		case valResponseTypeCode : *e = ResponseTypeCode
		case valResponseTypeToken : *e = ResponseTypeToken
		case valResponseTypeIdToken : *e = ResponseTypeIdToken
		default : return diag.MakeError(OidcErrorUnsupportedResponseType, fmt.Sprintf("Unexpected value of ResponseType: '%s'", s), nil )
	}
	return nil
}

const(
	valResponseTypeNone = "none"
	valResponseTypeCode = "code"
	valResponseTypeToken = "token"
	valResponseTypeIdToken = "id_token"
)

type ResponseTypeSet uint8

func (s ResponseTypeSet) Len() int {
	return bits.OnesCount8(uint8(s))
}

func (s ResponseTypeSet) Contains(v ResponseType) bool {
	return (uint8(s)&(0x1<<v) == uint8(0x1<<v))
}

func (s ResponseTypeSet) String() string {
	if s.Len() <= 0 { return "" }
	sb := &strings.Builder{}
	first := true
	s.Iterate(func(v ResponseType) diag.Error {
		if !first {
			sb.WriteString(" ")
		} else {
			first = false
		}
		sb.WriteString(v.String())
		return nil
	})
	return sb.String()
}

func (s *ResponseTypeSet) From(input string) diag.Error {
	if s == nil {
		return diag.MakeError(OidcErrorServerError, "Unable to unmarshal 'ResponseTypeSet' into nil", nil)
	}
	vals := strings.Fields(input)
	for _, v := range vals{
		var e ResponseType
		if err := e.From(v); err != nil {
			return err
		}
		s.add(e)
	}
	return nil
}

type ResponseTypeSetIteratorFunc func(v ResponseType) diag.Error

func (s ResponseTypeSet) Iterate(f ResponseTypeSetIteratorFunc) diag.Error {
	var err diag.Error
	if s.Contains(ResponseTypeNone) {
		err = f(ResponseTypeNone)
		if err != nil {
			return err
		}
	}
	if s.Contains(ResponseTypeCode) {
		err = f(ResponseTypeCode)
		if err != nil {
			return err
		}
	}
	if s.Contains(ResponseTypeToken) {
		err = f(ResponseTypeToken)
		if err != nil {
			return err
		}
	}
	if s.Contains(ResponseTypeIdToken) {
		err = f(ResponseTypeIdToken)
		if err != nil {
			return err
		}
	}
	return nil
}

// unexported setter
func (s *ResponseTypeSet) add(v ResponseType) {
	*s=*s|(0x1<<v)
}
const (
	ResponseModeQuery ResponseMode = iota + 1
	ResponseModeFragment
	ResponseModeFormPost
)

func (e ResponseMode) String() string {
	switch e {
		case ResponseModeQuery : return valResponseModeQuery
		case ResponseModeFragment : return valResponseModeFragment
		case ResponseModeFormPost : return valResponseModeFormPost
	}
	return ""
}

func (e ResponseMode) Known() bool {
	switch e {
		case ResponseModeQuery : return true
		case ResponseModeFragment : return true
		case ResponseModeFormPost : return true
	}
	return false
}

func (e *ResponseMode) From(s string) diag.Error {
	if e == nil {
		return diag.MakeError(OidcErrorServerError, "Unable to unmarshal 'ResponseMode' into nil", nil)
	}
	
	switch s {
		case valResponseModeQuery : *e = ResponseModeQuery
		case valResponseModeFragment : *e = ResponseModeFragment
		case valResponseModeFormPost : *e = ResponseModeFormPost
		default : return diag.MakeError(OidcErrorInvalidRequest, fmt.Sprintf("Unexpected value of ResponseMode: '%s'", s), nil )
	}
	return nil
}

const(
	valResponseModeQuery = "query"
	valResponseModeFragment = "fragment"
	valResponseModeFormPost = "form_post"
)

const (
	ScopeOpenid Scope = "openid"
	ScopeOfflineAccess Scope = "offline_access"
)

func (e Scope) String() string {
	return string(e)
}

func (e Scope) Known() bool {
	switch e {
		case ScopeOpenid : return true
		case ScopeOfflineAccess : return true
	}
	return false
}

func (e *Scope) From(s string) diag.Error {
	if e == nil {
		return diag.MakeError(OidcErrorServerError, "Unable to unmarshal 'Scope' into nil", nil)
	}
	*e = Scope(s)
	return nil
}



type ScopeSet map[Scope]struct{}
func (s ScopeSet) Len() int {
	return len(s)
}

func (s ScopeSet) Contains(v Scope) bool {
	_, ok := s[v]
	return ok
}

func (s ScopeSet) String() string {
	if s.Len() <= 0 { return "" }
	sb := &strings.Builder{}
	first := true
	s.Iterate(func(v Scope) diag.Error {
		if !first {
			sb.WriteString(" ")
		} else {
			first = false
		}
		sb.WriteString(v.String())
		return nil
	})
	return sb.String()
}

func (s *ScopeSet) From(input string) diag.Error {
	if s == nil {
		return diag.MakeError(OidcErrorServerError, "Unable to unmarshal 'ScopeSet' into nil", nil)
	}
	vals := strings.Fields(input)
	for _, v := range vals{
		var e Scope
		if err := e.From(v); err != nil {
			return err
		}
		s.add(e)
	}
	return nil
}

type ScopeSetIteratorFunc func(v Scope) diag.Error

func (s ScopeSet) Iterate(f ScopeSetIteratorFunc) diag.Error {
	var err diag.Error
	for k, _ := range s {
		err = f(k)
		if err != nil {
			return err
		}
	}
	return nil
}

// unexported setter
func (s *ScopeSet) add(v Scope) {
	if (*s)==nil {
		*s = ScopeSet{}
	}
	(*s)[v]=exists
}
const (
	GrantTypePassword GrantType = iota + 1
	GrantTypeRefreshToken
	GrantTypeAuthorizationCode
	GrantTypeClientCredentials
)

func (e GrantType) String() string {
	switch e {
		case GrantTypePassword : return valGrantTypePassword
		case GrantTypeRefreshToken : return valGrantTypeRefreshToken
		case GrantTypeAuthorizationCode : return valGrantTypeAuthorizationCode
		case GrantTypeClientCredentials : return valGrantTypeClientCredentials
	}
	return ""
}

func (e GrantType) Known() bool {
	switch e {
		case GrantTypePassword : return true
		case GrantTypeRefreshToken : return true
		case GrantTypeAuthorizationCode : return true
		case GrantTypeClientCredentials : return true
	}
	return false
}

func (e *GrantType) From(s string) diag.Error {
	if e == nil {
		return diag.MakeError(OidcErrorServerError, "Unable to unmarshal 'GrantType' into nil", nil)
	}
	
	switch s {
		case valGrantTypePassword : *e = GrantTypePassword
		case valGrantTypeRefreshToken : *e = GrantTypeRefreshToken
		case valGrantTypeAuthorizationCode : *e = GrantTypeAuthorizationCode
		case valGrantTypeClientCredentials : *e = GrantTypeClientCredentials
		default : return diag.MakeError(OidcErrorUnsupportedGrantType, fmt.Sprintf("Unexpected value of GrantType: '%s'", s), nil )
	}
	return nil
}

const(
	valGrantTypePassword = "password"
	valGrantTypeRefreshToken = "refresh_token"
	valGrantTypeAuthorizationCode = "authorization_code"
	valGrantTypeClientCredentials = "client_credentials"
)

const (
	PromptNone Prompt = iota + 1
	PromptLogin
)

func (e Prompt) String() string {
	switch e {
		case PromptNone : return valPromptNone
		case PromptLogin : return valPromptLogin
	}
	return ""
}

func (e Prompt) Known() bool {
	switch e {
		case PromptNone : return true
		case PromptLogin : return true
	}
	return false
}

func (e *Prompt) From(s string) diag.Error {
	if e == nil {
		return diag.MakeError(OidcErrorServerError, "Unable to unmarshal 'Prompt' into nil", nil)
	}
	
	switch s {
		case valPromptNone : *e = PromptNone
		case valPromptLogin : *e = PromptLogin
		default : return diag.MakeError(OidcErrorInvalidRequest, fmt.Sprintf("Unexpected value of Prompt: '%s'", s), nil )
	}
	return nil
}

const(
	valPromptNone = "none"
	valPromptLogin = "login"
)

type PromptSet uint8

func (s PromptSet) Len() int {
	return bits.OnesCount8(uint8(s))
}

func (s PromptSet) Contains(v Prompt) bool {
	return (uint8(s)&(0x1<<v) == uint8(0x1<<v))
}

func (s PromptSet) String() string {
	if s.Len() <= 0 { return "" }
	sb := &strings.Builder{}
	first := true
	s.Iterate(func(v Prompt) diag.Error {
		if !first {
			sb.WriteString(" ")
		} else {
			first = false
		}
		sb.WriteString(v.String())
		return nil
	})
	return sb.String()
}

func (s *PromptSet) From(input string) diag.Error {
	if s == nil {
		return diag.MakeError(OidcErrorServerError, "Unable to unmarshal 'PromptSet' into nil", nil)
	}
	vals := strings.Fields(input)
	for _, v := range vals{
		var e Prompt
		if err := e.From(v); err != nil {
			return err
		}
		s.add(e)
	}
	return nil
}

type PromptSetIteratorFunc func(v Prompt) diag.Error

func (s PromptSet) Iterate(f PromptSetIteratorFunc) diag.Error {
	var err diag.Error
	if s.Contains(PromptNone) {
		err = f(PromptNone)
		if err != nil {
			return err
		}
	}
	if s.Contains(PromptLogin) {
		err = f(PromptLogin)
		if err != nil {
			return err
		}
	}
	return nil
}

// unexported setter
func (s *PromptSet) add(v Prompt) {
	*s=*s|(0x1<<v)
}