// Code generated by oidc_gen. DO NOT EDIT.

package protocol

import(
	"net/url"
	"strconv"
	"fmt"
	"text/template"
	"io"
	"github.com/francoispqt/gojay"
	"github.com/vmware/lightwave/sts/internal/pkg/diag"
)


func (s *refreshTokGrantImpl) UnMarshalQuery(vals url.Values) diag.Error {
	var err diag.Error
	var v string

	v, err = getSingleQueryParam("refresh_token", vals, !false, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	s.refreshToken = v

	return nil
}

func (s *tokenRequest) UnMarshalQuery(vals url.Values) diag.Error {
	var err diag.Error
	var v string

	v, err = getSingleQueryParam("grant_type", vals, !false, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	err0 := s.grantType.From(v)
	if err0 != nil {
		return diag.MakeError(OidcErrorInvalidRequest, "Failed to unmarshal tokenRequest from query: %v", err0)
	}

	v, err = getSingleQueryParam("client_id", vals, !true, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	if len(v) > 0 {
		s.clientID = v
	}

	v, err = getSingleQueryParam("redirect_uri", vals, !true, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	if len(v) > 0 {
		v2, err2 := url.Parse(v)
		if err2 != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to unmarshal tokenRequest from query: %v", err2)
		}
		s.redirectURI = v2
	}

	v, err = getSingleQueryParam("scope", vals, !true, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	if len(v) > 0 {
		err3 := s.scope.From(v)
		if err3 != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to unmarshal tokenRequest from query: %v", err3)
		}
	}

	return nil
}

func (s *logoutRequest) UnMarshalQuery(vals url.Values) diag.Error {
	var err diag.Error
	var v string

	v, err = getSingleQueryParam("id_token_hint", vals, !false, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	s.token = v

	v, err = getSingleQueryParam("post_logout_redirect_uri", vals, !true, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	if len(v) > 0 {
		v1, err1 := url.Parse(v)
		if err1 != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to unmarshal logoutRequest from query: %v", err1)
		}
		s.redirectURI = v1
	}

	v, err = getSingleQueryParam("state", vals, !true, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	if len(v) > 0 {
		s.state = v
	}

	return nil
}

func (s *authzRequest) UnMarshalQuery(vals url.Values) diag.Error {
	var err diag.Error
	var v string

	v, err = getSingleQueryParam("grant_type", vals, !true, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	if len(v) > 0 {
		err0 := s.grantType.From(v)
		if err0 != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to unmarshal authzRequest from query: %v", err0)
		}
	}

	v, err = getSingleQueryParam("response_type", vals, !false, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	err1 := s.responseTypes.From(v)
	if err1 != nil {
		return diag.MakeError(OidcErrorInvalidRequest, "Failed to unmarshal authzRequest from query: %v", err1)
	}

	v, err = getSingleQueryParam("scope", vals, !true, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	if len(v) > 0 {
		err2 := s.scope.From(v)
		if err2 != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to unmarshal authzRequest from query: %v", err2)
		}
	}

	v, err = getSingleQueryParam("state", vals, !true, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	if len(v) > 0 {
		s.state = v
	}

	v, err = getSingleQueryParam("response_mode", vals, !true, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	if len(v) > 0 {
		err4 := s.responseMode.From(v)
		if err4 != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to unmarshal authzRequest from query: %v", err4)
		}
	}

	v, err = getSingleQueryParam("nonce", vals, !true, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	if len(v) > 0 {
		s.nonce = v
	}

	v, err = getSingleQueryParam("prompt", vals, !true, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	if len(v) > 0 {
		err6 := s.prompt.From(v)
		if err6 != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to unmarshal authzRequest from query: %v", err6)
		}
	}

	v, err = getSingleQueryParam("id_token_hint", vals, !true, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	if len(v) > 0 {
		s.idTokenHint = v
	}

	return nil
}

func (s *metadata) MarshalJSONObject(enc *gojay.Encoder) {
	enc.ArrayKey(
		"response_types_supported", gojay.EncodeArrayFunc(func(enc *gojay.Encoder) {
		for _, v := range s.responseTypes {
			enc.String(v)
		}
	}))
	enc.StringKey("jwks_uri", s.jwksEndpoint)
	enc.StringKey("end_session_endpoint", s.logoutEndpoint)
	enc.ArrayKey(
		"subject_types_supported", gojay.EncodeArrayFunc(func(enc *gojay.Encoder) {
		for _, v := range s.subjectTypes {
			enc.String(v)
		}
	}))
	enc.ArrayKey(
		"id_token_signing_alg_values_supported", gojay.EncodeArrayFunc(func(enc *gojay.Encoder) {
		for _, v := range s.signingAlg {
			enc.String(v)
		}
	}))
	enc.StringKey("issuer", s.issuer)
	enc.StringKey("authorization_endpoint", s.authorizationEndpoint)
	enc.StringKey("token_endpoint", s.tokenEndpoint)
	enc.BoolKeyOmitEmpty("frontchannel_logout_supported", s.fcLogoutSupported)
	enc.BoolKeyOmitEmpty("frontchannel_logout_session_supported", s.fcLogoutSessionSupported)

}

func (s *metadata) IsNil() bool {
	return s == nil
}


func (s *metadata) Marshal(w io.Writer, format MarshalFormat) diag.Error {
	switch format {
	case MarshalFormatJSON:
		{
			bytes, e := gojay.MarshalJSONObject(s)
			if e != nil {
				return diag.MakeError(OidcErrorEncodeError, "Failed to serialize json", e)
			}
			_, e = w.Write(bytes)
			if e != nil {
				return diag.MakeError(OidcErrorEncodeError, "Failed to serialize json", e)
			}
			return nil
		}
	case MarshalFormatQuery, MarshalFormatFragment:
		{
			return diag.MakeError(OidcErrorEncodeError, "Type 'metadata' does not support Query serialization", nil)
		}
	case MarshalFormatForm:
		{
			return diag.MakeError(OidcErrorEncodeError, "Type 'metadata' does not support Form serialization", nil)
		}
	case MarshalFormatHTML:
		{
			return diag.MakeError(OidcErrorEncodeError, "Type 'metadata' does not support HTML serialization", nil)
		}
	default:
		{
			return diag.MakeError(OidcErrorEncodeError,
				fmt.Sprintf("Unsupported marshal format: %v", format), nil)
		}
	}
}


func (s *pwdGrantImpl) UnMarshalQuery(vals url.Values) diag.Error {
	var err diag.Error
	var v string

	v, err = getSingleQueryParam("username", vals, !false, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	s.username = v

	v, err = getSingleQueryParam("password", vals, !false, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	s.password = v

	return nil
}

func (s *errorResponse) marshalQuery(w io.Writer) diag.Error {
	var err error
	var v string
	var written bool
	v = s.state
	if len(v) > 0 {
		if written {
			_, err = w.Write([]byte("&"))
			if err != nil {
				return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal errorResponse to query: %v", err)
			}
		}
		_, err = fmt.Fprintf(w, "%s=%s", url.QueryEscape("state"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorEncodeError, "Failed to marshal errorResponse to query: %v", err)
		}
		written = true
	}
	v = s.errName
	if written {
		_, err = w.Write([]byte("&"))
		if err != nil {
			return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal errorResponse to query: %v", err)
		}
	}
	_, err = fmt.Fprintf(w, "%s=%s", url.QueryEscape("error"), url.QueryEscape(v))
	if err != nil {
		return diag.MakeError(OidcErrorEncodeError, "Failed to marshal errorResponse to query: %v", err)
	}
	written = true
	v = s.description
	if len(v) > 0 {
		if written {
			_, err = w.Write([]byte("&"))
			if err != nil {
				return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal errorResponse to query: %v", err)
			}
		}
		_, err = fmt.Fprintf(w, "%s=%s", url.QueryEscape("error_description"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorEncodeError, "Failed to marshal errorResponse to query: %v", err)
		}
		written = true
	}

	return nil
}

func (s *errorResponse) marshalHtml(w io.Writer) diag.Error {
	var err error

	_, err = w.Write([]byte(formPostHtmlStart))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal errorResponse to form: %v", err)
	}

	derr := s.marshalForm(w)
	if derr != nil {
		return derr
	}

	_, err = w.Write([]byte(formPostHtmlEnd))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal errorResponse to form: %v", err)
	}

	return nil
}

func (s *errorResponse) marshalForm(w io.Writer) diag.Error {
	var err error

	_, err = w.Write([]byte(formStartBegin))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal errorResponse to form: %v", err)
	}
	template.HTMLEscape(w, []byte(s.redirectURL.String()))
	_, err = w.Write([]byte(formStartEnd))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal errorResponse to form: %v", err)
	}

	derr := s.marshalFields(w)
	if derr != nil {
		return derr
	}

	_, err = w.Write([]byte(formend))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal errorResponse to form: %v", err)
	}

	return nil
}

func (s *errorResponse) marshalFields(w io.Writer) diag.Error {
	var err error
	var v string
	v = s.state
	if len(v) > 0 {
		_, err = fmt.Fprintf(w, inputField, url.QueryEscape("state"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal errorResponse to query: %v", err)
		}
	}
	v = s.errName
	_, err = fmt.Fprintf(w, inputField, url.QueryEscape("error"), url.QueryEscape(v))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal errorResponse to query: %v", err)
	}
	v = s.description
	if len(v) > 0 {
		_, err = fmt.Fprintf(w, inputField, url.QueryEscape("error_description"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal errorResponse to query: %v", err)
		}
	}

	return nil
}


func (s *errorResponse) MarshalJSONObject(enc *gojay.Encoder) {
	enc.StringKeyOmitEmpty("state", s.state)
	enc.StringKey("error", s.errName)
	enc.StringKeyOmitEmpty("error_description", s.description)

}

func (s *errorResponse) IsNil() bool {
	return s == nil
}


func (s *errorResponse) Marshal(w io.Writer, format MarshalFormat) diag.Error {
	switch format {
	case MarshalFormatJSON:
		{
			bytes, e := gojay.MarshalJSONObject(s)
			if e != nil {
				return diag.MakeError(OidcErrorEncodeError, "Failed to serialize json", e)
			}
			_, e = w.Write(bytes)
			if e != nil {
				return diag.MakeError(OidcErrorEncodeError, "Failed to serialize json", e)
			}
			return nil
		}
	case MarshalFormatQuery, MarshalFormatFragment:
		{
			resURL := &url.URL{
				Scheme:  s.redirectURL.Scheme,
				Host:    s.redirectURL.Host,
				Path:    s.redirectURL.Path,
				RawPath: s.redirectURL.RawPath,
			}
			_, e := w.Write([]byte(resURL.String()))
			if e != nil {
				return diag.MakeError(OidcErrorStreamWriteError, "Failed to serialize query", e)
			}
			if format == MarshalFormatQuery {
				if len(resURL.RawQuery) > 0 {
					_, e = w.Write([]byte("&"))
					if e != nil {
						return diag.MakeError(OidcErrorStreamWriteError, "Failed to serialize query", e)
					}
				} else {
					_, e = w.Write([]byte("?"))
					if e != nil {
						return diag.MakeError(OidcErrorStreamWriteError, "Failed to serialize query", e)
					}
				}
			} else {
				_, e = w.Write([]byte("#"))
				if e != nil {
					return diag.MakeError(OidcErrorStreamWriteError, "Failed to serialize query", e)
				}
			}
			return s.marshalQuery(w)
		}
	case MarshalFormatForm:
		{
			return s.marshalForm(w)
		}
	case MarshalFormatHTML:
		{
			return s.marshalHtml(w)
		}
	default:
		{
			return diag.MakeError(OidcErrorEncodeError,
				fmt.Sprintf("Unsupported marshal format: %v", format), nil)
		}
	}
}


func (s *clientInfoImpl) UnMarshalQuery(vals url.Values) diag.Error {
	var err diag.Error
	var v string

	v, err = getSingleQueryParam("client_id", vals, !false, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	s.clientID = v

	v, err = getSingleQueryParam("redirect_uri", vals, !true, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	if len(v) > 0 {
		v1, err1 := url.Parse(v)
		if err1 != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to unmarshal clientInfoImpl from query: %v", err1)
		}
		s.redirectURI = v1
	}

	return nil
}

func (s *token) MarshalJSONObject(enc *gojay.Encoder) {
	enc.StringKey("sub", s.subject)
	enc.StringKey("iss", s.issuer)
	enc.StringKey("lightwave_token_class", s.tokenClass)
	enc.StringKey("token_type", s.tokenType)
	enc.ArrayKeyOmitEmpty("aud", &s.audience)
	enc.StringKeyOmitEmpty("scope", s.scope.String())
	enc.Int64Key("exp", s.expiration)
	enc.Int64Key("iat", s.issuedAt)
	enc.StringKey("jti", s.id)
	enc.StringKeyOmitEmpty("sid", s.sid)
	enc.StringKeyOmitEmpty("nonce", s.nonce)
	enc.StringKeyOmitEmpty("at_hash", s.atHash)
	enc.StringKeyOmitEmpty("c_hash", s.cHash)
	enc.ArrayKeyOmitEmpty("lightwave_groups", &s.groups)
	enc.StringKey("lightwave_tenant", s.tenant)

}

func (s *token) IsNil() bool {
	return s == nil
}


func (s *token) UnmarshalJSONObject(dec *gojay.Decoder, key string) error {

	var err error
	switch key {
	case "sub" : {
		err = dec.String(&s.subject)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
	}
	case "iss" : {
		err = dec.String(&s.issuer)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
	}
	case "lightwave_token_class" : {
		err = dec.String(&s.tokenClass)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
	}
	case "token_type" : {
		err = dec.String(&s.tokenType)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
	}
	case "aud" : {
		err = dec.Array(&s.audience)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
	}
	case "scope" : {
		v5 := ""
		err = dec.String(&v5)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
		var ve5 ScopeSet
		err = ve5.From(v5)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
	}
	case "exp" : {
		err = dec.Int64(&s.expiration)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
	}
	case "iat" : {
		err = dec.Int64(&s.issuedAt)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
	}
	case "jti" : {
		err = dec.String(&s.id)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
	}
	case "sid" : {
		err = dec.String(&s.sid)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
	}
	case "nonce" : {
		err = dec.String(&s.nonce)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
	}
	case "at_hash" : {
		err = dec.String(&s.atHash)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
	}
	case "c_hash" : {
		err = dec.String(&s.cHash)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
	}
	case "lightwave_groups" : {
		err = dec.Array(&s.groups)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
	}
	case "lightwave_tenant" : {
		err = dec.String(&s.tenant)
		if err != nil {
			return diag.MakeError(OidcErrorInvalidRequest, "Failed to un-marshal token from json: %v", err)
		}
	}
	}
	return nil
}

func (s *token) NKeys() int {
	return 15
}


func (s *token) Marshal(w io.Writer, format MarshalFormat) diag.Error {
	switch format {
	case MarshalFormatJSON:
		{
			bytes, e := gojay.MarshalJSONObject(s)
			if e != nil {
				return diag.MakeError(OidcErrorEncodeError, "Failed to serialize json", e)
			}
			_, e = w.Write(bytes)
			if e != nil {
				return diag.MakeError(OidcErrorEncodeError, "Failed to serialize json", e)
			}
			return nil
		}
	case MarshalFormatQuery, MarshalFormatFragment:
		{
			return diag.MakeError(OidcErrorEncodeError, "Type 'token' does not support Query serialization", nil)
		}
	case MarshalFormatForm:
		{
			return diag.MakeError(OidcErrorEncodeError, "Type 'token' does not support Form serialization", nil)
		}
	case MarshalFormatHTML:
		{
			return diag.MakeError(OidcErrorEncodeError, "Type 'token' does not support HTML serialization", nil)
		}
	default:
		{
			return diag.MakeError(OidcErrorEncodeError,
				fmt.Sprintf("Unsupported marshal format: %v", format), nil)
		}
	}
}


func (s *tokenResponse) marshalQuery(w io.Writer) diag.Error {
	var err error
	var v string
	var written bool
	v = s.state
	if len(v) > 0 {
		if written {
			_, err = w.Write([]byte("&"))
			if err != nil {
				return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
			}
		}
		_, err = fmt.Fprintf(w, "%s=%s", url.QueryEscape("state"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorEncodeError, "Failed to marshal tokenResponse to query: %v", err)
		}
		written = true
	}
	v = s.accessToken
	if len(v) > 0 {
		if written {
			_, err = w.Write([]byte("&"))
			if err != nil {
				return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
			}
		}
		_, err = fmt.Fprintf(w, "%s=%s", url.QueryEscape("access_token"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorEncodeError, "Failed to marshal tokenResponse to query: %v", err)
		}
		written = true
	}
	v = s.tokenType
	if len(v) > 0 {
		if written {
			_, err = w.Write([]byte("&"))
			if err != nil {
				return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
			}
		}
		_, err = fmt.Fprintf(w, "%s=%s", url.QueryEscape("token_type"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorEncodeError, "Failed to marshal tokenResponse to query: %v", err)
		}
		written = true
	}
	v = strconv.FormatInt(int64(s.expiresInSecs), 10)
	if len(v) > 0 {
		if written {
			_, err = w.Write([]byte("&"))
			if err != nil {
				return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
			}
		}
		_, err = fmt.Fprintf(w, "%s=%s", url.QueryEscape("expires_in"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorEncodeError, "Failed to marshal tokenResponse to query: %v", err)
		}
		written = true
	}
	v = s.refreshToken
	if len(v) > 0 {
		if written {
			_, err = w.Write([]byte("&"))
			if err != nil {
				return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
			}
		}
		_, err = fmt.Fprintf(w, "%s=%s", url.QueryEscape("refresh_token"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorEncodeError, "Failed to marshal tokenResponse to query: %v", err)
		}
		written = true
	}
	v = s.scope.String()
	if len(v) > 0 {
		if written {
			_, err = w.Write([]byte("&"))
			if err != nil {
				return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
			}
		}
		_, err = fmt.Fprintf(w, "%s=%s", url.QueryEscape("scope"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorEncodeError, "Failed to marshal tokenResponse to query: %v", err)
		}
		written = true
	}
	v = s.idToken
	if len(v) > 0 {
		if written {
			_, err = w.Write([]byte("&"))
			if err != nil {
				return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
			}
		}
		_, err = fmt.Fprintf(w, "%s=%s", url.QueryEscape("id_token"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorEncodeError, "Failed to marshal tokenResponse to query: %v", err)
		}
		written = true
	}
	v = s.code
	if len(v) > 0 {
		if written {
			_, err = w.Write([]byte("&"))
			if err != nil {
				return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
			}
		}
		_, err = fmt.Fprintf(w, "%s=%s", url.QueryEscape("code"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorEncodeError, "Failed to marshal tokenResponse to query: %v", err)
		}
		written = true
	}

	return nil
}

func (s *tokenResponse) marshalHtml(w io.Writer) diag.Error {
	var err error

	_, err = w.Write([]byte(formPostHtmlStart))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to form: %v", err)
	}

	derr := s.marshalForm(w)
	if derr != nil {
		return derr
	}

	_, err = w.Write([]byte(formPostHtmlEnd))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to form: %v", err)
	}

	return nil
}

func (s *tokenResponse) marshalForm(w io.Writer) diag.Error {
	var err error

	_, err = w.Write([]byte(formStartBegin))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to form: %v", err)
	}
	template.HTMLEscape(w, []byte(s.redirectURL.String()))
	_, err = w.Write([]byte(formStartEnd))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to form: %v", err)
	}

	derr := s.marshalFields(w)
	if derr != nil {
		return derr
	}

	_, err = w.Write([]byte(formend))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to form: %v", err)
	}

	return nil
}

func (s *tokenResponse) marshalFields(w io.Writer) diag.Error {
	var err error
	var v string
	v = s.state
	if len(v) > 0 {
		_, err = fmt.Fprintf(w, inputField, url.QueryEscape("state"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
		}
	}
	v = s.accessToken
	if len(v) > 0 {
		_, err = fmt.Fprintf(w, inputField, url.QueryEscape("access_token"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
		}
	}
	v = s.tokenType
	if len(v) > 0 {
		_, err = fmt.Fprintf(w, inputField, url.QueryEscape("token_type"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
		}
	}
	v = strconv.FormatInt(int64(s.expiresInSecs), 10)
	if len(v) > 0 {
		_, err = fmt.Fprintf(w, inputField, url.QueryEscape("expires_in"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
		}
	}
	v = s.refreshToken
	if len(v) > 0 {
		_, err = fmt.Fprintf(w, inputField, url.QueryEscape("refresh_token"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
		}
	}
	v = s.scope.String()
	if len(v) > 0 {
		_, err = fmt.Fprintf(w, inputField, url.QueryEscape("scope"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
		}
	}
	v = s.idToken
	if len(v) > 0 {
		_, err = fmt.Fprintf(w, inputField, url.QueryEscape("id_token"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
		}
	}
	v = s.code
	if len(v) > 0 {
		_, err = fmt.Fprintf(w, inputField, url.QueryEscape("code"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal tokenResponse to query: %v", err)
		}
	}

	return nil
}


func (s *tokenResponse) MarshalJSONObject(enc *gojay.Encoder) {
	enc.StringKeyOmitEmpty("state", s.state)
	enc.StringKeyOmitEmpty("access_token", s.accessToken)
	enc.StringKeyOmitEmpty("token_type", s.tokenType)
	enc.IntKeyOmitEmpty("expires_in", s.expiresInSecs)
	enc.StringKeyOmitEmpty("refresh_token", s.refreshToken)
	enc.StringKeyOmitEmpty("scope", s.scope.String())
	enc.StringKeyOmitEmpty("id_token", s.idToken)
	enc.StringKeyOmitEmpty("code", s.code)

}

func (s *tokenResponse) IsNil() bool {
	return s == nil
}


func (s *tokenResponse) Marshal(w io.Writer, format MarshalFormat) diag.Error {
	switch format {
	case MarshalFormatJSON:
		{
			bytes, e := gojay.MarshalJSONObject(s)
			if e != nil {
				return diag.MakeError(OidcErrorEncodeError, "Failed to serialize json", e)
			}
			_, e = w.Write(bytes)
			if e != nil {
				return diag.MakeError(OidcErrorEncodeError, "Failed to serialize json", e)
			}
			return nil
		}
	case MarshalFormatQuery, MarshalFormatFragment:
		{
			resURL := &url.URL{
				Scheme:  s.redirectURL.Scheme,
				Host:    s.redirectURL.Host,
				Path:    s.redirectURL.Path,
				RawPath: s.redirectURL.RawPath,
			}
			_, e := w.Write([]byte(resURL.String()))
			if e != nil {
				return diag.MakeError(OidcErrorStreamWriteError, "Failed to serialize query", e)
			}
			if format == MarshalFormatQuery {
				if len(resURL.RawQuery) > 0 {
					_, e = w.Write([]byte("&"))
					if e != nil {
						return diag.MakeError(OidcErrorStreamWriteError, "Failed to serialize query", e)
					}
				} else {
					_, e = w.Write([]byte("?"))
					if e != nil {
						return diag.MakeError(OidcErrorStreamWriteError, "Failed to serialize query", e)
					}
				}
			} else {
				_, e = w.Write([]byte("#"))
				if e != nil {
					return diag.MakeError(OidcErrorStreamWriteError, "Failed to serialize query", e)
				}
			}
			return s.marshalQuery(w)
		}
	case MarshalFormatForm:
		{
			return s.marshalForm(w)
		}
	case MarshalFormatHTML:
		{
			return s.marshalHtml(w)
		}
	default:
		{
			return diag.MakeError(OidcErrorEncodeError,
				fmt.Sprintf("Unsupported marshal format: %v", format), nil)
		}
	}
}


func (s *authzResponse) marshalQuery(w io.Writer) diag.Error {
	var err error
	var v string
	var written bool
	v = s.state
	if len(v) > 0 {
		if written {
			_, err = w.Write([]byte("&"))
			if err != nil {
				return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal authzResponse to query: %v", err)
			}
		}
		_, err = fmt.Fprintf(w, "%s=%s", url.QueryEscape("state"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorEncodeError, "Failed to marshal authzResponse to query: %v", err)
		}
		written = true
	}
	v = s.code
	if written {
		_, err = w.Write([]byte("&"))
		if err != nil {
			return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal authzResponse to query: %v", err)
		}
	}
	_, err = fmt.Fprintf(w, "%s=%s", url.QueryEscape("code"), url.QueryEscape(v))
	if err != nil {
		return diag.MakeError(OidcErrorEncodeError, "Failed to marshal authzResponse to query: %v", err)
	}
	written = true

	return nil
}

func (s *authzResponse) marshalHtml(w io.Writer) diag.Error {
	var err error

	_, err = w.Write([]byte(formPostHtmlStart))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal authzResponse to form: %v", err)
	}

	derr := s.marshalForm(w)
	if derr != nil {
		return derr
	}

	_, err = w.Write([]byte(formPostHtmlEnd))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal authzResponse to form: %v", err)
	}

	return nil
}

func (s *authzResponse) marshalForm(w io.Writer) diag.Error {
	var err error

	_, err = w.Write([]byte(formStartBegin))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal authzResponse to form: %v", err)
	}
	template.HTMLEscape(w, []byte(s.redirectURL.String()))
	_, err = w.Write([]byte(formStartEnd))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal authzResponse to form: %v", err)
	}

	derr := s.marshalFields(w)
	if derr != nil {
		return derr
	}

	_, err = w.Write([]byte(formend))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal authzResponse to form: %v", err)
	}

	return nil
}

func (s *authzResponse) marshalFields(w io.Writer) diag.Error {
	var err error
	var v string
	v = s.state
	if len(v) > 0 {
		_, err = fmt.Fprintf(w, inputField, url.QueryEscape("state"), url.QueryEscape(v))
		if err != nil {
			return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal authzResponse to query: %v", err)
		}
	}
	v = s.code
	_, err = fmt.Fprintf(w, inputField, url.QueryEscape("code"), url.QueryEscape(v))
	if err != nil {
		return diag.MakeError(OidcErrorStreamWriteError, "Failed to marshal authzResponse to query: %v", err)
	}

	return nil
}


func (s *authzResponse) MarshalJSONObject(enc *gojay.Encoder) {
	enc.StringKeyOmitEmpty("state", s.state)
	enc.StringKey("code", s.code)

}

func (s *authzResponse) IsNil() bool {
	return s == nil
}


func (s *authzResponse) Marshal(w io.Writer, format MarshalFormat) diag.Error {
	switch format {
	case MarshalFormatJSON:
		{
			bytes, e := gojay.MarshalJSONObject(s)
			if e != nil {
				return diag.MakeError(OidcErrorEncodeError, "Failed to serialize json", e)
			}
			_, e = w.Write(bytes)
			if e != nil {
				return diag.MakeError(OidcErrorEncodeError, "Failed to serialize json", e)
			}
			return nil
		}
	case MarshalFormatQuery, MarshalFormatFragment:
		{
			resURL := &url.URL{
				Scheme:  s.redirectURL.Scheme,
				Host:    s.redirectURL.Host,
				Path:    s.redirectURL.Path,
				RawPath: s.redirectURL.RawPath,
			}
			_, e := w.Write([]byte(resURL.String()))
			if e != nil {
				return diag.MakeError(OidcErrorStreamWriteError, "Failed to serialize query", e)
			}
			if format == MarshalFormatQuery {
				if len(resURL.RawQuery) > 0 {
					_, e = w.Write([]byte("&"))
					if e != nil {
						return diag.MakeError(OidcErrorStreamWriteError, "Failed to serialize query", e)
					}
				} else {
					_, e = w.Write([]byte("?"))
					if e != nil {
						return diag.MakeError(OidcErrorStreamWriteError, "Failed to serialize query", e)
					}
				}
			} else {
				_, e = w.Write([]byte("#"))
				if e != nil {
					return diag.MakeError(OidcErrorStreamWriteError, "Failed to serialize query", e)
				}
			}
			return s.marshalQuery(w)
		}
	case MarshalFormatForm:
		{
			return s.marshalForm(w)
		}
	case MarshalFormatHTML:
		{
			return s.marshalHtml(w)
		}
	default:
		{
			return diag.MakeError(OidcErrorEncodeError,
				fmt.Sprintf("Unsupported marshal format: %v", format), nil)
		}
	}
}


func (s *authzCodeGrantImpl) UnMarshalQuery(vals url.Values) diag.Error {
	var err diag.Error
	var v string

	v, err = getSingleQueryParam("code", vals, !false, OidcErrorInvalidRequest)
	if err != nil {
		return err
	}
	s.code = v

	return nil
}

const (
	PostFormID        = "oidcPostForm"
	formPostHtmlStart = `<html>
  <head><title>Code Form Post</title></head>
  <body onload="document.getElementById('oidcPostForm').submit(); ">`

	formStartBegin = `
    <form id="oidcPostForm" method="post" action="`
	formStartEnd = `"/>`

	formend = `
    </form>`

	inputField = `<input type="hidden" name="%s" value="%s"/>`

	formPostHtmlEnd = `  </body>
</html>`
)
